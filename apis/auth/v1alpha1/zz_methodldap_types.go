// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MethodLdapInitParameters struct {

	// (List of String) Account attribute maps fullname and email.
	// Account attribute maps fullname and email.
	AccountAttributeMaps []*string `json:"accountAttributeMaps,omitempty" tf:"account_attribute_maps,omitempty"`

	// (Boolean) Use anon bind when performing LDAP group searches .
	// Use anon bind when performing LDAP group searches (optional).
	AnonGroupSearch *bool `json:"anonGroupSearch,omitempty" tf:"anon_group_search,omitempty"`

	// (String) The distinguished name of entry to bind when performing user and group searches .
	// The distinguished name of entry to bind when performing user and group searches (optional).
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// dn performing user and group searches .
	// The password to use along with bind-dn performing user and group searches (optional).
	BindPassword *string `json:"bindPassword,omitempty" tf:"bind_password,omitempty"`

	// (String) The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	BindPasswordHMAC *string `json:"bindPasswordHmac,omitempty" tf:"bind_password_hmac,omitempty"`

	// encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server.  This may be specified multiple times
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server.
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate .
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	ClientCertificateKey *string `json:"clientCertificateKey,omitempty" tf:"client_certificate_key,omitempty"`

	// (String) The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientCertificateKeyHMAC *string `json:"clientCertificateKeyHmac,omitempty" tf:"client_certificate_key_hmac,omitempty"`

	// (String) Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways .
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	DereferenceAliases *string `json:"dereferenceAliases,omitempty" tf:"dereference_aliases,omitempty"`

	// (String) The auth method description.
	// The auth method description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Use anon bind to discover the bind DN of a user .
	// Use anon bind to discover the bind DN of a user (optional).
	DiscoverDn *bool `json:"discoverDn,omitempty" tf:"discover_dn,omitempty"`

	// (Boolean) Find the authenticated user's groups during authentication .
	// Find the authenticated user's groups during authentication (optional).
	EnableGroups *bool `json:"enableGroups,omitempty" tf:"enable_groups,omitempty"`

	// (String) The attribute that enumerates a user's group membership from entries returned by a group search .
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	GroupAttr *string `json:"groupAttr,omitempty" tf:"group_attr,omitempty"`

	// (String) The base DN under which to perform group search.
	// The base DN under which to perform group search.
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (String) A go template used to construct a LDAP group search filter .
	// A go template used to construct a LDAP group search filter (optional).
	GroupFilter *string `json:"groupFilter,omitempty" tf:"group_filter,omitempty"`

	// insecure and use with caution.
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// (Boolean) When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	IsPrimaryForScope *bool `json:"isPrimaryForScope,omitempty" tf:"is_primary_for_scope,omitempty"`

	// (Number) MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups .
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	MaximumPageSize *float64 `json:"maximumPageSize,omitempty" tf:"maximum_page_size,omitempty"`

	// (String) The auth method name. Defaults to the resource name.
	// The auth method name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID.
	// The scope ID.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (Boolean) Issue StartTLS command after connecting .
	// Issue StartTLS command after connecting (optional).
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// private', or 'active-public'. Defaults to active-public.
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) The type of auth method; hardcoded.
	// The type of auth method; hardcoded.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The userPrincipalDomain used to construct the UPN string for the authenticating user .
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	UpnDomain *string `json:"upnDomain,omitempty" tf:"upn_domain,omitempty"`

	// (List of String) The LDAP URLs that specify LDAP servers to connect to .  May be specified multiple times.
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`

	// (Boolean) Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships .
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	UseTokenGroups *bool `json:"useTokenGroups,omitempty" tf:"use_token_groups,omitempty"`

	// (String) The attribute on user entry matching the username passed when authenticating .
	// The attribute on user entry matching the username passed when authenticating (optional).
	UserAttr *string `json:"userAttr,omitempty" tf:"user_attr,omitempty"`

	// (String) The base DN under which to perform user search .
	// The base DN under which to perform user search (optional).
	UserDn *string `json:"userDn,omitempty" tf:"user_dn,omitempty"`

	// (String) A go template used to construct a LDAP user search filter .
	// A go template used to construct a LDAP user search filter (optional).
	UserFilter *string `json:"userFilter,omitempty" tf:"user_filter,omitempty"`
}

type MethodLdapObservation struct {

	// (List of String) Account attribute maps fullname and email.
	// Account attribute maps fullname and email.
	AccountAttributeMaps []*string `json:"accountAttributeMaps,omitempty" tf:"account_attribute_maps,omitempty"`

	// (Boolean) Use anon bind when performing LDAP group searches .
	// Use anon bind when performing LDAP group searches (optional).
	AnonGroupSearch *bool `json:"anonGroupSearch,omitempty" tf:"anon_group_search,omitempty"`

	// (String) The distinguished name of entry to bind when performing user and group searches .
	// The distinguished name of entry to bind when performing user and group searches (optional).
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// dn performing user and group searches .
	// The password to use along with bind-dn performing user and group searches (optional).
	BindPassword *string `json:"bindPassword,omitempty" tf:"bind_password,omitempty"`

	// (String) The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	BindPasswordHMAC *string `json:"bindPasswordHmac,omitempty" tf:"bind_password_hmac,omitempty"`

	// encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server.  This may be specified multiple times
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server.
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate .
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	ClientCertificateKey *string `json:"clientCertificateKey,omitempty" tf:"client_certificate_key,omitempty"`

	// (String) The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientCertificateKeyHMAC *string `json:"clientCertificateKeyHmac,omitempty" tf:"client_certificate_key_hmac,omitempty"`

	// (String) Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways .
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	DereferenceAliases *string `json:"dereferenceAliases,omitempty" tf:"dereference_aliases,omitempty"`

	// (String) The auth method description.
	// The auth method description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Use anon bind to discover the bind DN of a user .
	// Use anon bind to discover the bind DN of a user (optional).
	DiscoverDn *bool `json:"discoverDn,omitempty" tf:"discover_dn,omitempty"`

	// (Boolean) Find the authenticated user's groups during authentication .
	// Find the authenticated user's groups during authentication (optional).
	EnableGroups *bool `json:"enableGroups,omitempty" tf:"enable_groups,omitempty"`

	// (String) The attribute that enumerates a user's group membership from entries returned by a group search .
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	GroupAttr *string `json:"groupAttr,omitempty" tf:"group_attr,omitempty"`

	// (String) The base DN under which to perform group search.
	// The base DN under which to perform group search.
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (String) A go template used to construct a LDAP group search filter .
	// A go template used to construct a LDAP group search filter (optional).
	GroupFilter *string `json:"groupFilter,omitempty" tf:"group_filter,omitempty"`

	// (String) The ID of the auth method.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// insecure and use with caution.
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// (Boolean) When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	IsPrimaryForScope *bool `json:"isPrimaryForScope,omitempty" tf:"is_primary_for_scope,omitempty"`

	// (Number) MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups .
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	MaximumPageSize *float64 `json:"maximumPageSize,omitempty" tf:"maximum_page_size,omitempty"`

	// (String) The auth method name. Defaults to the resource name.
	// The auth method name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID.
	// The scope ID.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (Boolean) Issue StartTLS command after connecting .
	// Issue StartTLS command after connecting (optional).
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// private', or 'active-public'. Defaults to active-public.
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) The type of auth method; hardcoded.
	// The type of auth method; hardcoded.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The userPrincipalDomain used to construct the UPN string for the authenticating user .
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	UpnDomain *string `json:"upnDomain,omitempty" tf:"upn_domain,omitempty"`

	// (List of String) The LDAP URLs that specify LDAP servers to connect to .  May be specified multiple times.
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`

	// (Boolean) Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships .
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	UseTokenGroups *bool `json:"useTokenGroups,omitempty" tf:"use_token_groups,omitempty"`

	// (String) The attribute on user entry matching the username passed when authenticating .
	// The attribute on user entry matching the username passed when authenticating (optional).
	UserAttr *string `json:"userAttr,omitempty" tf:"user_attr,omitempty"`

	// (String) The base DN under which to perform user search .
	// The base DN under which to perform user search (optional).
	UserDn *string `json:"userDn,omitempty" tf:"user_dn,omitempty"`

	// (String) A go template used to construct a LDAP user search filter .
	// A go template used to construct a LDAP user search filter (optional).
	UserFilter *string `json:"userFilter,omitempty" tf:"user_filter,omitempty"`
}

type MethodLdapParameters struct {

	// (List of String) Account attribute maps fullname and email.
	// Account attribute maps fullname and email.
	// +kubebuilder:validation:Optional
	AccountAttributeMaps []*string `json:"accountAttributeMaps,omitempty" tf:"account_attribute_maps,omitempty"`

	// (Boolean) Use anon bind when performing LDAP group searches .
	// Use anon bind when performing LDAP group searches (optional).
	// +kubebuilder:validation:Optional
	AnonGroupSearch *bool `json:"anonGroupSearch,omitempty" tf:"anon_group_search,omitempty"`

	// (String) The distinguished name of entry to bind when performing user and group searches .
	// The distinguished name of entry to bind when performing user and group searches (optional).
	// +kubebuilder:validation:Optional
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// dn performing user and group searches .
	// The password to use along with bind-dn performing user and group searches (optional).
	// +kubebuilder:validation:Optional
	BindPassword *string `json:"bindPassword,omitempty" tf:"bind_password,omitempty"`

	// (String) The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// +kubebuilder:validation:Optional
	BindPasswordHMAC *string `json:"bindPasswordHmac,omitempty" tf:"bind_password_hmac,omitempty"`

	// encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server.  This may be specified multiple times
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	// +kubebuilder:validation:Optional
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server.
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	// +kubebuilder:validation:Optional
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate .
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	// +kubebuilder:validation:Optional
	ClientCertificateKey *string `json:"clientCertificateKey,omitempty" tf:"client_certificate_key,omitempty"`

	// (String) The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	// +kubebuilder:validation:Optional
	ClientCertificateKeyHMAC *string `json:"clientCertificateKeyHmac,omitempty" tf:"client_certificate_key_hmac,omitempty"`

	// (String) Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways .
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	// +kubebuilder:validation:Optional
	DereferenceAliases *string `json:"dereferenceAliases,omitempty" tf:"dereference_aliases,omitempty"`

	// (String) The auth method description.
	// The auth method description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Use anon bind to discover the bind DN of a user .
	// Use anon bind to discover the bind DN of a user (optional).
	// +kubebuilder:validation:Optional
	DiscoverDn *bool `json:"discoverDn,omitempty" tf:"discover_dn,omitempty"`

	// (Boolean) Find the authenticated user's groups during authentication .
	// Find the authenticated user's groups during authentication (optional).
	// +kubebuilder:validation:Optional
	EnableGroups *bool `json:"enableGroups,omitempty" tf:"enable_groups,omitempty"`

	// (String) The attribute that enumerates a user's group membership from entries returned by a group search .
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	// +kubebuilder:validation:Optional
	GroupAttr *string `json:"groupAttr,omitempty" tf:"group_attr,omitempty"`

	// (String) The base DN under which to perform group search.
	// The base DN under which to perform group search.
	// +kubebuilder:validation:Optional
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (String) A go template used to construct a LDAP group search filter .
	// A go template used to construct a LDAP group search filter (optional).
	// +kubebuilder:validation:Optional
	GroupFilter *string `json:"groupFilter,omitempty" tf:"group_filter,omitempty"`

	// insecure and use with caution.
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	// +kubebuilder:validation:Optional
	InsecureTLS *bool `json:"insecureTls,omitempty" tf:"insecure_tls,omitempty"`

	// (Boolean) When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	// +kubebuilder:validation:Optional
	IsPrimaryForScope *bool `json:"isPrimaryForScope,omitempty" tf:"is_primary_for_scope,omitempty"`

	// (Number) MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups .
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	// +kubebuilder:validation:Optional
	MaximumPageSize *float64 `json:"maximumPageSize,omitempty" tf:"maximum_page_size,omitempty"`

	// (String) The auth method name. Defaults to the resource name.
	// The auth method name. Defaults to the resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID.
	// The scope ID.
	// +kubebuilder:validation:Optional
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (Boolean) Issue StartTLS command after connecting .
	// Issue StartTLS command after connecting (optional).
	// +kubebuilder:validation:Optional
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// private', or 'active-public'. Defaults to active-public.
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) The type of auth method; hardcoded.
	// The type of auth method; hardcoded.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The userPrincipalDomain used to construct the UPN string for the authenticating user .
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	// +kubebuilder:validation:Optional
	UpnDomain *string `json:"upnDomain,omitempty" tf:"upn_domain,omitempty"`

	// (List of String) The LDAP URLs that specify LDAP servers to connect to .  May be specified multiple times.
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	// +kubebuilder:validation:Optional
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`

	// (Boolean) Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships .
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	// +kubebuilder:validation:Optional
	UseTokenGroups *bool `json:"useTokenGroups,omitempty" tf:"use_token_groups,omitempty"`

	// (String) The attribute on user entry matching the username passed when authenticating .
	// The attribute on user entry matching the username passed when authenticating (optional).
	// +kubebuilder:validation:Optional
	UserAttr *string `json:"userAttr,omitempty" tf:"user_attr,omitempty"`

	// (String) The base DN under which to perform user search .
	// The base DN under which to perform user search (optional).
	// +kubebuilder:validation:Optional
	UserDn *string `json:"userDn,omitempty" tf:"user_dn,omitempty"`

	// (String) A go template used to construct a LDAP user search filter .
	// A go template used to construct a LDAP user search filter (optional).
	// +kubebuilder:validation:Optional
	UserFilter *string `json:"userFilter,omitempty" tf:"user_filter,omitempty"`
}

// MethodLdapSpec defines the desired state of MethodLdap
type MethodLdapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MethodLdapParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MethodLdapInitParameters `json:"initProvider,omitempty"`
}

// MethodLdapStatus defines the observed state of MethodLdap.
type MethodLdapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MethodLdapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MethodLdap is the Schema for the MethodLdaps API. The LDAP auth method resource allows you to configure a Boundary authmethodldap.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,boundary}
type MethodLdap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scopeId) || (has(self.initProvider) && has(self.initProvider.scopeId))",message="spec.forProvider.scopeId is a required parameter"
	Spec   MethodLdapSpec   `json:"spec"`
	Status MethodLdapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MethodLdapList contains a list of MethodLdaps
type MethodLdapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MethodLdap `json:"items"`
}

// Repository type metadata.
var (
	MethodLdap_Kind             = "MethodLdap"
	MethodLdap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MethodLdap_Kind}.String()
	MethodLdap_KindAPIVersion   = MethodLdap_Kind + "." + CRDGroupVersion.String()
	MethodLdap_GroupVersionKind = CRDGroupVersion.WithKind(MethodLdap_Kind)
)

func init() {
	SchemeBuilder.Register(&MethodLdap{}, &MethodLdapList{})
}
