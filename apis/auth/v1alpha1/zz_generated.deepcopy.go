//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Method) DeepCopyInto(out *Method) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Method.
func (in *Method) DeepCopy() *Method {
	if in == nil {
		return nil
	}
	out := new(Method)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Method) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodInitParameters) DeepCopyInto(out *MethodInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MinLoginNameLength != nil {
		in, out := &in.MinLoginNameLength, &out.MinLoginNameLength
		*out = new(float64)
		**out = **in
	}
	if in.MinPasswordLength != nil {
		in, out := &in.MinPasswordLength, &out.MinPasswordLength
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodInitParameters.
func (in *MethodInitParameters) DeepCopy() *MethodInitParameters {
	if in == nil {
		return nil
	}
	out := new(MethodInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodLdap) DeepCopyInto(out *MethodLdap) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodLdap.
func (in *MethodLdap) DeepCopy() *MethodLdap {
	if in == nil {
		return nil
	}
	out := new(MethodLdap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MethodLdap) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodLdapInitParameters) DeepCopyInto(out *MethodLdapInitParameters) {
	*out = *in
	if in.AccountAttributeMaps != nil {
		in, out := &in.AccountAttributeMaps, &out.AccountAttributeMaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnonGroupSearch != nil {
		in, out := &in.AnonGroupSearch, &out.AnonGroupSearch
		*out = new(bool)
		**out = **in
	}
	if in.BindDn != nil {
		in, out := &in.BindDn, &out.BindDn
		*out = new(string)
		**out = **in
	}
	if in.BindPassword != nil {
		in, out := &in.BindPassword, &out.BindPassword
		*out = new(string)
		**out = **in
	}
	if in.BindPasswordHMAC != nil {
		in, out := &in.BindPasswordHMAC, &out.BindPasswordHMAC
		*out = new(string)
		**out = **in
	}
	if in.Certificates != nil {
		in, out := &in.Certificates, &out.Certificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ClientCertificate != nil {
		in, out := &in.ClientCertificate, &out.ClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificateKey != nil {
		in, out := &in.ClientCertificateKey, &out.ClientCertificateKey
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificateKeyHMAC != nil {
		in, out := &in.ClientCertificateKeyHMAC, &out.ClientCertificateKeyHMAC
		*out = new(string)
		**out = **in
	}
	if in.DereferenceAliases != nil {
		in, out := &in.DereferenceAliases, &out.DereferenceAliases
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiscoverDn != nil {
		in, out := &in.DiscoverDn, &out.DiscoverDn
		*out = new(bool)
		**out = **in
	}
	if in.EnableGroups != nil {
		in, out := &in.EnableGroups, &out.EnableGroups
		*out = new(bool)
		**out = **in
	}
	if in.GroupAttr != nil {
		in, out := &in.GroupAttr, &out.GroupAttr
		*out = new(string)
		**out = **in
	}
	if in.GroupDn != nil {
		in, out := &in.GroupDn, &out.GroupDn
		*out = new(string)
		**out = **in
	}
	if in.GroupFilter != nil {
		in, out := &in.GroupFilter, &out.GroupFilter
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.IsPrimaryForScope != nil {
		in, out := &in.IsPrimaryForScope, &out.IsPrimaryForScope
		*out = new(bool)
		**out = **in
	}
	if in.MaximumPageSize != nil {
		in, out := &in.MaximumPageSize, &out.MaximumPageSize
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.StartTLS != nil {
		in, out := &in.StartTLS, &out.StartTLS
		*out = new(bool)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpnDomain != nil {
		in, out := &in.UpnDomain, &out.UpnDomain
		*out = new(string)
		**out = **in
	}
	if in.Urls != nil {
		in, out := &in.Urls, &out.Urls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseTokenGroups != nil {
		in, out := &in.UseTokenGroups, &out.UseTokenGroups
		*out = new(bool)
		**out = **in
	}
	if in.UserAttr != nil {
		in, out := &in.UserAttr, &out.UserAttr
		*out = new(string)
		**out = **in
	}
	if in.UserDn != nil {
		in, out := &in.UserDn, &out.UserDn
		*out = new(string)
		**out = **in
	}
	if in.UserFilter != nil {
		in, out := &in.UserFilter, &out.UserFilter
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodLdapInitParameters.
func (in *MethodLdapInitParameters) DeepCopy() *MethodLdapInitParameters {
	if in == nil {
		return nil
	}
	out := new(MethodLdapInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodLdapList) DeepCopyInto(out *MethodLdapList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MethodLdap, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodLdapList.
func (in *MethodLdapList) DeepCopy() *MethodLdapList {
	if in == nil {
		return nil
	}
	out := new(MethodLdapList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MethodLdapList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodLdapObservation) DeepCopyInto(out *MethodLdapObservation) {
	*out = *in
	if in.AccountAttributeMaps != nil {
		in, out := &in.AccountAttributeMaps, &out.AccountAttributeMaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnonGroupSearch != nil {
		in, out := &in.AnonGroupSearch, &out.AnonGroupSearch
		*out = new(bool)
		**out = **in
	}
	if in.BindDn != nil {
		in, out := &in.BindDn, &out.BindDn
		*out = new(string)
		**out = **in
	}
	if in.BindPassword != nil {
		in, out := &in.BindPassword, &out.BindPassword
		*out = new(string)
		**out = **in
	}
	if in.BindPasswordHMAC != nil {
		in, out := &in.BindPasswordHMAC, &out.BindPasswordHMAC
		*out = new(string)
		**out = **in
	}
	if in.Certificates != nil {
		in, out := &in.Certificates, &out.Certificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ClientCertificate != nil {
		in, out := &in.ClientCertificate, &out.ClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificateKey != nil {
		in, out := &in.ClientCertificateKey, &out.ClientCertificateKey
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificateKeyHMAC != nil {
		in, out := &in.ClientCertificateKeyHMAC, &out.ClientCertificateKeyHMAC
		*out = new(string)
		**out = **in
	}
	if in.DereferenceAliases != nil {
		in, out := &in.DereferenceAliases, &out.DereferenceAliases
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiscoverDn != nil {
		in, out := &in.DiscoverDn, &out.DiscoverDn
		*out = new(bool)
		**out = **in
	}
	if in.EnableGroups != nil {
		in, out := &in.EnableGroups, &out.EnableGroups
		*out = new(bool)
		**out = **in
	}
	if in.GroupAttr != nil {
		in, out := &in.GroupAttr, &out.GroupAttr
		*out = new(string)
		**out = **in
	}
	if in.GroupDn != nil {
		in, out := &in.GroupDn, &out.GroupDn
		*out = new(string)
		**out = **in
	}
	if in.GroupFilter != nil {
		in, out := &in.GroupFilter, &out.GroupFilter
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.IsPrimaryForScope != nil {
		in, out := &in.IsPrimaryForScope, &out.IsPrimaryForScope
		*out = new(bool)
		**out = **in
	}
	if in.MaximumPageSize != nil {
		in, out := &in.MaximumPageSize, &out.MaximumPageSize
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.StartTLS != nil {
		in, out := &in.StartTLS, &out.StartTLS
		*out = new(bool)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpnDomain != nil {
		in, out := &in.UpnDomain, &out.UpnDomain
		*out = new(string)
		**out = **in
	}
	if in.Urls != nil {
		in, out := &in.Urls, &out.Urls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseTokenGroups != nil {
		in, out := &in.UseTokenGroups, &out.UseTokenGroups
		*out = new(bool)
		**out = **in
	}
	if in.UserAttr != nil {
		in, out := &in.UserAttr, &out.UserAttr
		*out = new(string)
		**out = **in
	}
	if in.UserDn != nil {
		in, out := &in.UserDn, &out.UserDn
		*out = new(string)
		**out = **in
	}
	if in.UserFilter != nil {
		in, out := &in.UserFilter, &out.UserFilter
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodLdapObservation.
func (in *MethodLdapObservation) DeepCopy() *MethodLdapObservation {
	if in == nil {
		return nil
	}
	out := new(MethodLdapObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodLdapParameters) DeepCopyInto(out *MethodLdapParameters) {
	*out = *in
	if in.AccountAttributeMaps != nil {
		in, out := &in.AccountAttributeMaps, &out.AccountAttributeMaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnonGroupSearch != nil {
		in, out := &in.AnonGroupSearch, &out.AnonGroupSearch
		*out = new(bool)
		**out = **in
	}
	if in.BindDn != nil {
		in, out := &in.BindDn, &out.BindDn
		*out = new(string)
		**out = **in
	}
	if in.BindPassword != nil {
		in, out := &in.BindPassword, &out.BindPassword
		*out = new(string)
		**out = **in
	}
	if in.BindPasswordHMAC != nil {
		in, out := &in.BindPasswordHMAC, &out.BindPasswordHMAC
		*out = new(string)
		**out = **in
	}
	if in.Certificates != nil {
		in, out := &in.Certificates, &out.Certificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ClientCertificate != nil {
		in, out := &in.ClientCertificate, &out.ClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificateKey != nil {
		in, out := &in.ClientCertificateKey, &out.ClientCertificateKey
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificateKeyHMAC != nil {
		in, out := &in.ClientCertificateKeyHMAC, &out.ClientCertificateKeyHMAC
		*out = new(string)
		**out = **in
	}
	if in.DereferenceAliases != nil {
		in, out := &in.DereferenceAliases, &out.DereferenceAliases
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DiscoverDn != nil {
		in, out := &in.DiscoverDn, &out.DiscoverDn
		*out = new(bool)
		**out = **in
	}
	if in.EnableGroups != nil {
		in, out := &in.EnableGroups, &out.EnableGroups
		*out = new(bool)
		**out = **in
	}
	if in.GroupAttr != nil {
		in, out := &in.GroupAttr, &out.GroupAttr
		*out = new(string)
		**out = **in
	}
	if in.GroupDn != nil {
		in, out := &in.GroupDn, &out.GroupDn
		*out = new(string)
		**out = **in
	}
	if in.GroupFilter != nil {
		in, out := &in.GroupFilter, &out.GroupFilter
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.IsPrimaryForScope != nil {
		in, out := &in.IsPrimaryForScope, &out.IsPrimaryForScope
		*out = new(bool)
		**out = **in
	}
	if in.MaximumPageSize != nil {
		in, out := &in.MaximumPageSize, &out.MaximumPageSize
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.StartTLS != nil {
		in, out := &in.StartTLS, &out.StartTLS
		*out = new(bool)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpnDomain != nil {
		in, out := &in.UpnDomain, &out.UpnDomain
		*out = new(string)
		**out = **in
	}
	if in.Urls != nil {
		in, out := &in.Urls, &out.Urls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseTokenGroups != nil {
		in, out := &in.UseTokenGroups, &out.UseTokenGroups
		*out = new(bool)
		**out = **in
	}
	if in.UserAttr != nil {
		in, out := &in.UserAttr, &out.UserAttr
		*out = new(string)
		**out = **in
	}
	if in.UserDn != nil {
		in, out := &in.UserDn, &out.UserDn
		*out = new(string)
		**out = **in
	}
	if in.UserFilter != nil {
		in, out := &in.UserFilter, &out.UserFilter
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodLdapParameters.
func (in *MethodLdapParameters) DeepCopy() *MethodLdapParameters {
	if in == nil {
		return nil
	}
	out := new(MethodLdapParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodLdapSpec) DeepCopyInto(out *MethodLdapSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodLdapSpec.
func (in *MethodLdapSpec) DeepCopy() *MethodLdapSpec {
	if in == nil {
		return nil
	}
	out := new(MethodLdapSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodLdapStatus) DeepCopyInto(out *MethodLdapStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodLdapStatus.
func (in *MethodLdapStatus) DeepCopy() *MethodLdapStatus {
	if in == nil {
		return nil
	}
	out := new(MethodLdapStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodList) DeepCopyInto(out *MethodList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Method, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodList.
func (in *MethodList) DeepCopy() *MethodList {
	if in == nil {
		return nil
	}
	out := new(MethodList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MethodList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodObservation) DeepCopyInto(out *MethodObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MinLoginNameLength != nil {
		in, out := &in.MinLoginNameLength, &out.MinLoginNameLength
		*out = new(float64)
		**out = **in
	}
	if in.MinPasswordLength != nil {
		in, out := &in.MinPasswordLength, &out.MinPasswordLength
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodObservation.
func (in *MethodObservation) DeepCopy() *MethodObservation {
	if in == nil {
		return nil
	}
	out := new(MethodObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodOidc) DeepCopyInto(out *MethodOidc) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodOidc.
func (in *MethodOidc) DeepCopy() *MethodOidc {
	if in == nil {
		return nil
	}
	out := new(MethodOidc)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MethodOidc) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodOidcInitParameters) DeepCopyInto(out *MethodOidcInitParameters) {
	*out = *in
	if in.APIURLPrefix != nil {
		in, out := &in.APIURLPrefix, &out.APIURLPrefix
		*out = new(string)
		**out = **in
	}
	if in.AccountClaimMaps != nil {
		in, out := &in.AccountClaimMaps, &out.AccountClaimMaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedAudiences != nil {
		in, out := &in.AllowedAudiences, &out.AllowedAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CallbackURL != nil {
		in, out := &in.CallbackURL, &out.CallbackURL
		*out = new(string)
		**out = **in
	}
	if in.ClaimsScopes != nil {
		in, out := &in.ClaimsScopes, &out.ClaimsScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretHMAC != nil {
		in, out := &in.ClientSecretHMAC, &out.ClientSecretHMAC
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableDiscoveredConfigValidation != nil {
		in, out := &in.DisableDiscoveredConfigValidation, &out.DisableDiscoveredConfigValidation
		*out = new(bool)
		**out = **in
	}
	if in.IdpCACerts != nil {
		in, out := &in.IdpCACerts, &out.IdpCACerts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IsPrimaryForScope != nil {
		in, out := &in.IsPrimaryForScope, &out.IsPrimaryForScope
		*out = new(bool)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.MaxAge != nil {
		in, out := &in.MaxAge, &out.MaxAge
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Prompts != nil {
		in, out := &in.Prompts, &out.Prompts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.SigningAlgorithms != nil {
		in, out := &in.SigningAlgorithms, &out.SigningAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodOidcInitParameters.
func (in *MethodOidcInitParameters) DeepCopy() *MethodOidcInitParameters {
	if in == nil {
		return nil
	}
	out := new(MethodOidcInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodOidcList) DeepCopyInto(out *MethodOidcList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MethodOidc, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodOidcList.
func (in *MethodOidcList) DeepCopy() *MethodOidcList {
	if in == nil {
		return nil
	}
	out := new(MethodOidcList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MethodOidcList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodOidcObservation) DeepCopyInto(out *MethodOidcObservation) {
	*out = *in
	if in.APIURLPrefix != nil {
		in, out := &in.APIURLPrefix, &out.APIURLPrefix
		*out = new(string)
		**out = **in
	}
	if in.AccountClaimMaps != nil {
		in, out := &in.AccountClaimMaps, &out.AccountClaimMaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedAudiences != nil {
		in, out := &in.AllowedAudiences, &out.AllowedAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CallbackURL != nil {
		in, out := &in.CallbackURL, &out.CallbackURL
		*out = new(string)
		**out = **in
	}
	if in.ClaimsScopes != nil {
		in, out := &in.ClaimsScopes, &out.ClaimsScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretHMAC != nil {
		in, out := &in.ClientSecretHMAC, &out.ClientSecretHMAC
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableDiscoveredConfigValidation != nil {
		in, out := &in.DisableDiscoveredConfigValidation, &out.DisableDiscoveredConfigValidation
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IdpCACerts != nil {
		in, out := &in.IdpCACerts, &out.IdpCACerts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IsPrimaryForScope != nil {
		in, out := &in.IsPrimaryForScope, &out.IsPrimaryForScope
		*out = new(bool)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.MaxAge != nil {
		in, out := &in.MaxAge, &out.MaxAge
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Prompts != nil {
		in, out := &in.Prompts, &out.Prompts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.SigningAlgorithms != nil {
		in, out := &in.SigningAlgorithms, &out.SigningAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodOidcObservation.
func (in *MethodOidcObservation) DeepCopy() *MethodOidcObservation {
	if in == nil {
		return nil
	}
	out := new(MethodOidcObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodOidcParameters) DeepCopyInto(out *MethodOidcParameters) {
	*out = *in
	if in.APIURLPrefix != nil {
		in, out := &in.APIURLPrefix, &out.APIURLPrefix
		*out = new(string)
		**out = **in
	}
	if in.AccountClaimMaps != nil {
		in, out := &in.AccountClaimMaps, &out.AccountClaimMaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedAudiences != nil {
		in, out := &in.AllowedAudiences, &out.AllowedAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CallbackURL != nil {
		in, out := &in.CallbackURL, &out.CallbackURL
		*out = new(string)
		**out = **in
	}
	if in.ClaimsScopes != nil {
		in, out := &in.ClaimsScopes, &out.ClaimsScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretHMAC != nil {
		in, out := &in.ClientSecretHMAC, &out.ClientSecretHMAC
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretSecretRef != nil {
		in, out := &in.ClientSecretSecretRef, &out.ClientSecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableDiscoveredConfigValidation != nil {
		in, out := &in.DisableDiscoveredConfigValidation, &out.DisableDiscoveredConfigValidation
		*out = new(bool)
		**out = **in
	}
	if in.IdpCACerts != nil {
		in, out := &in.IdpCACerts, &out.IdpCACerts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IsPrimaryForScope != nil {
		in, out := &in.IsPrimaryForScope, &out.IsPrimaryForScope
		*out = new(bool)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.MaxAge != nil {
		in, out := &in.MaxAge, &out.MaxAge
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Prompts != nil {
		in, out := &in.Prompts, &out.Prompts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.SigningAlgorithms != nil {
		in, out := &in.SigningAlgorithms, &out.SigningAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodOidcParameters.
func (in *MethodOidcParameters) DeepCopy() *MethodOidcParameters {
	if in == nil {
		return nil
	}
	out := new(MethodOidcParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodOidcSpec) DeepCopyInto(out *MethodOidcSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodOidcSpec.
func (in *MethodOidcSpec) DeepCopy() *MethodOidcSpec {
	if in == nil {
		return nil
	}
	out := new(MethodOidcSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodOidcStatus) DeepCopyInto(out *MethodOidcStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodOidcStatus.
func (in *MethodOidcStatus) DeepCopy() *MethodOidcStatus {
	if in == nil {
		return nil
	}
	out := new(MethodOidcStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodParameters) DeepCopyInto(out *MethodParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MinLoginNameLength != nil {
		in, out := &in.MinLoginNameLength, &out.MinLoginNameLength
		*out = new(float64)
		**out = **in
	}
	if in.MinPasswordLength != nil {
		in, out := &in.MinPasswordLength, &out.MinPasswordLength
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodParameters.
func (in *MethodParameters) DeepCopy() *MethodParameters {
	if in == nil {
		return nil
	}
	out := new(MethodParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodPassword) DeepCopyInto(out *MethodPassword) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodPassword.
func (in *MethodPassword) DeepCopy() *MethodPassword {
	if in == nil {
		return nil
	}
	out := new(MethodPassword)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MethodPassword) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodPasswordInitParameters) DeepCopyInto(out *MethodPasswordInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MinLoginNameLength != nil {
		in, out := &in.MinLoginNameLength, &out.MinLoginNameLength
		*out = new(float64)
		**out = **in
	}
	if in.MinPasswordLength != nil {
		in, out := &in.MinPasswordLength, &out.MinPasswordLength
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodPasswordInitParameters.
func (in *MethodPasswordInitParameters) DeepCopy() *MethodPasswordInitParameters {
	if in == nil {
		return nil
	}
	out := new(MethodPasswordInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodPasswordList) DeepCopyInto(out *MethodPasswordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MethodPassword, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodPasswordList.
func (in *MethodPasswordList) DeepCopy() *MethodPasswordList {
	if in == nil {
		return nil
	}
	out := new(MethodPasswordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MethodPasswordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodPasswordObservation) DeepCopyInto(out *MethodPasswordObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MinLoginNameLength != nil {
		in, out := &in.MinLoginNameLength, &out.MinLoginNameLength
		*out = new(float64)
		**out = **in
	}
	if in.MinPasswordLength != nil {
		in, out := &in.MinPasswordLength, &out.MinPasswordLength
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodPasswordObservation.
func (in *MethodPasswordObservation) DeepCopy() *MethodPasswordObservation {
	if in == nil {
		return nil
	}
	out := new(MethodPasswordObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodPasswordParameters) DeepCopyInto(out *MethodPasswordParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MinLoginNameLength != nil {
		in, out := &in.MinLoginNameLength, &out.MinLoginNameLength
		*out = new(float64)
		**out = **in
	}
	if in.MinPasswordLength != nil {
		in, out := &in.MinPasswordLength, &out.MinPasswordLength
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeID != nil {
		in, out := &in.ScopeID, &out.ScopeID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodPasswordParameters.
func (in *MethodPasswordParameters) DeepCopy() *MethodPasswordParameters {
	if in == nil {
		return nil
	}
	out := new(MethodPasswordParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodPasswordSpec) DeepCopyInto(out *MethodPasswordSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodPasswordSpec.
func (in *MethodPasswordSpec) DeepCopy() *MethodPasswordSpec {
	if in == nil {
		return nil
	}
	out := new(MethodPasswordSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodPasswordStatus) DeepCopyInto(out *MethodPasswordStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodPasswordStatus.
func (in *MethodPasswordStatus) DeepCopy() *MethodPasswordStatus {
	if in == nil {
		return nil
	}
	out := new(MethodPasswordStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodSpec) DeepCopyInto(out *MethodSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodSpec.
func (in *MethodSpec) DeepCopy() *MethodSpec {
	if in == nil {
		return nil
	}
	out := new(MethodSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MethodStatus) DeepCopyInto(out *MethodStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MethodStatus.
func (in *MethodStatus) DeepCopy() *MethodStatus {
	if in == nil {
		return nil
	}
	out := new(MethodStatus)
	in.DeepCopyInto(out)
	return out
}
