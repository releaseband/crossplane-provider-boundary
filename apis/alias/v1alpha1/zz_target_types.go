// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TargetInitParameters struct {

	// (String) The host id to pass to Boundary when performing an authorize session action.
	// The host id to pass to Boundary when performing an authorize session action.
	AuthorizeSessionHostID *string `json:"authorizeSessionHostId,omitempty" tf:"authorize_session_host_id,omitempty"`

	// (String) The alias description.
	// The alias description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The destination of the alias.
	// The destination of the alias.
	DestinationID *string `json:"destinationId,omitempty" tf:"destination_id,omitempty"`

	// (String) The alias name. Defaults to the resource name.
	// The alias name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID.
	// The scope ID.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) The type of alias; hardcoded.
	// The type of alias; hardcoded.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the alias.
	// The value of the alias.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetObservation struct {

	// (String) The host id to pass to Boundary when performing an authorize session action.
	// The host id to pass to Boundary when performing an authorize session action.
	AuthorizeSessionHostID *string `json:"authorizeSessionHostId,omitempty" tf:"authorize_session_host_id,omitempty"`

	// (String) The alias description.
	// The alias description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The destination of the alias.
	// The destination of the alias.
	DestinationID *string `json:"destinationId,omitempty" tf:"destination_id,omitempty"`

	// (String) The ID of the account.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The alias name. Defaults to the resource name.
	// The alias name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID.
	// The scope ID.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) The type of alias; hardcoded.
	// The type of alias; hardcoded.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the alias.
	// The value of the alias.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetParameters struct {

	// (String) The host id to pass to Boundary when performing an authorize session action.
	// The host id to pass to Boundary when performing an authorize session action.
	// +kubebuilder:validation:Optional
	AuthorizeSessionHostID *string `json:"authorizeSessionHostId,omitempty" tf:"authorize_session_host_id,omitempty"`

	// (String) The alias description.
	// The alias description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The destination of the alias.
	// The destination of the alias.
	// +kubebuilder:validation:Optional
	DestinationID *string `json:"destinationId,omitempty" tf:"destination_id,omitempty"`

	// (String) The alias name. Defaults to the resource name.
	// The alias name. Defaults to the resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID.
	// The scope ID.
	// +kubebuilder:validation:Optional
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) The type of alias; hardcoded.
	// The type of alias; hardcoded.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the alias.
	// The value of the alias.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// TargetSpec defines the desired state of Target
type TargetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TargetInitParameters `json:"initProvider,omitempty"`
}

// TargetStatus defines the observed state of Target.
type TargetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Target is the Schema for the Targets API. The target alias resource allows you to configure a Boundary target alias.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,boundary}
type Target struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scopeId) || (has(self.initProvider) && has(self.initProvider.scopeId))",message="spec.forProvider.scopeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   TargetSpec   `json:"spec"`
	Status TargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetList contains a list of Targets
type TargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Target `json:"items"`
}

// Repository type metadata.
var (
	Target_Kind             = "Target"
	Target_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Target_Kind}.String()
	Target_KindAPIVersion   = Target_Kind + "." + CRDGroupVersion.String()
	Target_GroupVersionKind = CRDGroupVersion.WithKind(Target_Kind)
)

func init() {
	SchemeBuilder.Register(&Target{}, &TargetList{})
}
