// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StoreVaultInitParameters struct {

	// (String) The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// encoded CA certificate to verify the Vault server's TLS certificate.
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// encoded client certificate to use for TLS authentication to the Vault server.
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// encoded private key matching the client certificate from 'client_certificate'.
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKeySecretRef *v1.SecretKeySelector `json:"clientCertificateKeySecretRef,omitempty" tf:"-"`

	// (String) The Vault credential store description.
	// The Vault credential store description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The Vault credential store name. Defaults to the resource name.
	// The Vault credential store name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace within Vault to use.
	// The namespace within Vault to use.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The scope for this credential store.
	// The scope for this credential store.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) Name to use as the SNI host when connecting to Vault via TLS.
	// Name to use as the SNI host when connecting to Vault via TLS.
	TLSServerName *string `json:"tlsServerName,omitempty" tf:"tls_server_name,omitempty"`

	// (Boolean) Whether or not to skip TLS verification.
	// Whether or not to skip TLS verification.
	TLSSkipVerify *bool `json:"tlsSkipVerify,omitempty" tf:"tls_skip_verify,omitempty"`

	// (String, Sensitive) A token used for accessing Vault.
	// A token used for accessing Vault.
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`

	// (String) HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault instances with Boundary.
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault instances with Boundary.
	WorkerFilter *string `json:"workerFilter,omitempty" tf:"worker_filter,omitempty"`
}

type StoreVaultObservation struct {

	// (String) The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// encoded CA certificate to verify the Vault server's TLS certificate.
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// encoded client certificate to use for TLS authentication to the Vault server.
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// (String) The Vault client certificate key hmac.
	// The Vault client certificate key hmac.
	ClientCertificateKeyHMAC *string `json:"clientCertificateKeyHmac,omitempty" tf:"client_certificate_key_hmac,omitempty"`

	// (String) The Vault credential store description.
	// The Vault credential store description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of the Vault credential store.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Vault credential store name. Defaults to the resource name.
	// The Vault credential store name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace within Vault to use.
	// The namespace within Vault to use.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The scope for this credential store.
	// The scope for this credential store.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) Name to use as the SNI host when connecting to Vault via TLS.
	// Name to use as the SNI host when connecting to Vault via TLS.
	TLSServerName *string `json:"tlsServerName,omitempty" tf:"tls_server_name,omitempty"`

	// (Boolean) Whether or not to skip TLS verification.
	// Whether or not to skip TLS verification.
	TLSSkipVerify *bool `json:"tlsSkipVerify,omitempty" tf:"tls_skip_verify,omitempty"`

	// (String) The Vault token hmac.
	// The Vault token hmac.
	TokenHMAC *string `json:"tokenHmac,omitempty" tf:"token_hmac,omitempty"`

	// (String) HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault instances with Boundary.
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault instances with Boundary.
	WorkerFilter *string `json:"workerFilter,omitempty" tf:"worker_filter,omitempty"`
}

type StoreVaultParameters struct {

	// (String) The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// encoded CA certificate to verify the Vault server's TLS certificate.
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	// +kubebuilder:validation:Optional
	CACert *string `json:"caCert,omitempty" tf:"ca_cert,omitempty"`

	// encoded client certificate to use for TLS authentication to the Vault server.
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	// +kubebuilder:validation:Optional
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// encoded private key matching the client certificate from 'client_certificate'.
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	// +kubebuilder:validation:Optional
	ClientCertificateKeySecretRef *v1.SecretKeySelector `json:"clientCertificateKeySecretRef,omitempty" tf:"-"`

	// (String) The Vault credential store description.
	// The Vault credential store description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The Vault credential store name. Defaults to the resource name.
	// The Vault credential store name. Defaults to the resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace within Vault to use.
	// The namespace within Vault to use.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The scope for this credential store.
	// The scope for this credential store.
	// +kubebuilder:validation:Optional
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) Name to use as the SNI host when connecting to Vault via TLS.
	// Name to use as the SNI host when connecting to Vault via TLS.
	// +kubebuilder:validation:Optional
	TLSServerName *string `json:"tlsServerName,omitempty" tf:"tls_server_name,omitempty"`

	// (Boolean) Whether or not to skip TLS verification.
	// Whether or not to skip TLS verification.
	// +kubebuilder:validation:Optional
	TLSSkipVerify *bool `json:"tlsSkipVerify,omitempty" tf:"tls_skip_verify,omitempty"`

	// (String, Sensitive) A token used for accessing Vault.
	// A token used for accessing Vault.
	// +kubebuilder:validation:Optional
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`

	// (String) HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault instances with Boundary.
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault instances with Boundary.
	// +kubebuilder:validation:Optional
	WorkerFilter *string `json:"workerFilter,omitempty" tf:"worker_filter,omitempty"`
}

// StoreVaultSpec defines the desired state of StoreVault
type StoreVaultSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StoreVaultParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StoreVaultInitParameters `json:"initProvider,omitempty"`
}

// StoreVaultStatus defines the observed state of StoreVault.
type StoreVaultStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StoreVaultObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StoreVault is the Schema for the StoreVaults API. The credential store for Vault resource allows you to configure a Boundary credential store for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,boundary}
type StoreVault struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.address) || (has(self.initProvider) && has(self.initProvider.address))",message="spec.forProvider.address is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scopeId) || (has(self.initProvider) && has(self.initProvider.scopeId))",message="spec.forProvider.scopeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenSecretRef)",message="spec.forProvider.tokenSecretRef is a required parameter"
	Spec   StoreVaultSpec   `json:"spec"`
	Status StoreVaultStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StoreVaultList contains a list of StoreVaults
type StoreVaultList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StoreVault `json:"items"`
}

// Repository type metadata.
var (
	StoreVault_Kind             = "StoreVault"
	StoreVault_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StoreVault_Kind}.String()
	StoreVault_KindAPIVersion   = StoreVault_Kind + "." + CRDGroupVersion.String()
	StoreVault_GroupVersionKind = CRDGroupVersion.WithKind(StoreVault_Kind)
)

func init() {
	SchemeBuilder.Register(&StoreVault{}, &StoreVaultList{})
}
