// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogInitParameters struct {

	// (String) The host catalog description.
	// The host catalog description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The host catalog name. Defaults to the resource name.
	// The host catalog name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID in which the resource is created.
	// The scope ID in which the resource is created.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) The host catalog type. Only static is supported.
	// The host catalog type. Only `static` is supported.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CatalogObservation struct {

	// (String) The host catalog description.
	// The host catalog description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of the host catalog.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The host catalog name. Defaults to the resource name.
	// The host catalog name. Defaults to the resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID in which the resource is created.
	// The scope ID in which the resource is created.
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) The host catalog type. Only static is supported.
	// The host catalog type. Only `static` is supported.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CatalogParameters struct {

	// (String) The host catalog description.
	// The host catalog description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The host catalog name. Defaults to the resource name.
	// The host catalog name. Defaults to the resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope ID in which the resource is created.
	// The scope ID in which the resource is created.
	// +kubebuilder:validation:Optional
	ScopeID *string `json:"scopeId,omitempty" tf:"scope_id,omitempty"`

	// (String) The host catalog type. Only static is supported.
	// The host catalog type. Only `static` is supported.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CatalogSpec defines the desired state of Catalog
type CatalogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CatalogInitParameters `json:"initProvider,omitempty"`
}

// CatalogStatus defines the observed state of Catalog.
type CatalogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Catalog is the Schema for the Catalogs API. Deprecated: use boundary_host_catalog_static instead.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,boundary}
type Catalog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scopeId) || (has(self.initProvider) && has(self.initProvider.scopeId))",message="spec.forProvider.scopeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   CatalogSpec   `json:"spec"`
	Status CatalogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogList contains a list of Catalogs
type CatalogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Catalog `json:"items"`
}

// Repository type metadata.
var (
	Catalog_Kind             = "Catalog"
	Catalog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Catalog_Kind}.String()
	Catalog_KindAPIVersion   = Catalog_Kind + "." + CRDGroupVersion.String()
	Catalog_GroupVersionKind = CRDGroupVersion.WithKind(Catalog_Kind)
)

func init() {
	SchemeBuilder.Register(&Catalog{}, &CatalogList{})
}
