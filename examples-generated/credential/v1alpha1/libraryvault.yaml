apiVersion: credential.boundary.upbound.io/v1alpha1
kind: LibraryVault
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/libraryvault
  labels:
    testing.upbound.io/example-name: foo
  name: foo
spec:
  forProvider:
    credentialStoreId: ${boundary_credential_store_vault.foo.id}
    description: My first Vault credential library!
    httpMethod: GET
    name: foo
    path: my/secret/foo

---

apiVersion: credential.boundary.upbound.io/v1alpha1
kind: StoreVault
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/libraryvault
  labels:
    testing.upbound.io/example-name: foo
  name: foo
spec:
  forProvider:
    address: http://127.0.0.1:8200
    description: My first Vault credential store!
    name: foo
    scopeId: ${boundary_scope.project.id}
    tokenSecretRef:
      key: example-key
      name: example-secret
      namespace: upbound-system

---

apiVersion: main.boundary.upbound.io/v1alpha1
kind: Scope
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/libraryvault
  labels:
    testing.upbound.io/example-name: org
  name: org
spec:
  forProvider:
    autoCreateAdminRole: true
    autoCreateDefaultRole: true
    description: My first scope!
    name: organization_one
    scopeId: global

---

apiVersion: main.boundary.upbound.io/v1alpha1
kind: Scope
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/libraryvault
  labels:
    testing.upbound.io/example-name: project
  name: project
spec:
  forProvider:
    autoCreateAdminRole: true
    description: My first scope!
    name: project_one
    scopeId: ${boundary_scope.org.id}
