apiVersion: credential.boundary.upbound.io/v1alpha1
kind: SSHPrivateKey
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/sshprivatekey
  labels:
    testing.upbound.io/example-name: example
  name: example
spec:
  forProvider:
    credentialStoreId: ${boundary_credential_store_static.example.id}
    description: My first ssh private key credential!
    name: example_ssh_private_key
    privateKeyPassphraseSecretRef:
      key: example-key
      name: example-secret
      namespace: upbound-system
    privateKeySecretRef:
      key: attribute.id_rsa
      name: example-secret
      namespace: upbound-system
    username: my-username

---

apiVersion: credential.boundary.upbound.io/v1alpha1
kind: StoreStatic
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/sshprivatekey
  labels:
    testing.upbound.io/example-name: example
  name: example
spec:
  forProvider:
    description: My first static credential store!
    name: example_static_credential_store
    scopeId: ${boundary_scope.project.id}

---

apiVersion: main.boundary.upbound.io/v1alpha1
kind: Scope
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/sshprivatekey
  labels:
    testing.upbound.io/example-name: org
  name: org
spec:
  forProvider:
    autoCreateAdminRole: true
    autoCreateDefaultRole: true
    description: global scope
    name: organization_one
    scopeId: global

---

apiVersion: main.boundary.upbound.io/v1alpha1
kind: Scope
metadata:
  annotations:
    meta.upbound.io/example-id: credential/v1alpha1/sshprivatekey
  labels:
    testing.upbound.io/example-name: project
  name: project
spec:
  forProvider:
    autoCreateAdminRole: true
    description: My first scope!
    name: project_one
    scopeId: ${boundary_scope.org.id}
