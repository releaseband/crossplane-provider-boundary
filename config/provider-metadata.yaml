name: hashicorp/boundary
resources:
    boundary_account Resource - terraform-provider-boundary:
        subCategory: ""
        description: 'Deprecated: use boundary_account_password instead.'
        name: boundary_account Resource - terraform-provider-boundary
        title: boundary_account Resource - terraform-provider-boundary
        argumentDocs:
            auth_method_id: (String) The resource ID for the auth method.
            description: (String) The account description.
            id: (String) The ID of the account.
            login_name: (String) The login name for this account.
            name: (String) The account name. Defaults to the resource name.
            password: (String, Sensitive) The account password. Only set on create, changes will not be reflected when updating account.
            type: (String) The resource type.
        importStatements: []
    boundary_account_ldap:
        subCategory: ""
        description: The account resource allows you to configure a Boundary account.
        name: boundary_account_ldap
        title: boundary_account_ldap Resource - terraform-provider-boundary
        examples:
            - name: einstein
              manifest: |-
                {
                  "auth_method_id": "${boundary_auth_method_ldap.forumsys_ldap.id}",
                  "login_name": "einstein",
                  "name": "einstein"
                }
              references:
                auth_method_id: boundary_auth_method_ldap.forumsys_ldap.id
              dependencies:
                boundary_auth_method_ldap.forumsys_ldap: |-
                    {
                      "bind_dn": "cn=read-only-admin,dc=example,dc=com",
                      "bind_password": "password",
                      "discover_dn": true,
                      "enable_groups": true,
                      "group_dn": "dc=example,dc=com",
                      "name": "forumsys public LDAP",
                      "scope_id": "global",
                      "state": "active-public",
                      "urls": [
                        "ldap://ldap.forumsys.com"
                      ],
                      "user_attr": "uid",
                      "user_dn": "dc=example,dc=com"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_user.einstein: |-
                    {
                      "account_ids": [
                        "${boundary_account_ldap.einstein.id}"
                      ],
                      "description": "User resource for einstein",
                      "name": "einstein",
                      "scope_id": "global"
                    }
        argumentDocs:
            auth_method_id: (String) The resource ID for the auth method.
            description: (String) The account description.
            id: (String) The ID of the account.
            login_name: (String) The login name for this account.
            name: (String) The account name. Defaults to the resource name.
            type: (String, Deprecated) The resource type.
        importStatements:
            - terraform import boundary_account_ldap.foo <my-id>
    boundary_account_oidc Resource - terraform-provider-boundary:
        subCategory: ""
        description: The account resource allows you to configure a Boundary account.
        name: boundary_account_oidc Resource - terraform-provider-boundary
        title: boundary_account_oidc Resource - terraform-provider-boundary
        argumentDocs:
            auth_method_id: (String) The resource ID for the auth method.
            description: (String) The account description.
            id: (String) The ID of the account.
            issuer: (String) The OIDC issuer.
            name: (String) The account name. Defaults to the resource name.
            subject: (String) The OIDC subject.
        importStatements: []
    boundary_account_password:
        subCategory: ""
        description: The account resource allows you to configure a Boundary account.
        name: boundary_account_password
        title: boundary_account_password Resource - terraform-provider-boundary
        examples:
            - name: jeff
              manifest: |-
                {
                  "auth_method_id": "${boundary_auth_method.password.id}",
                  "login_name": "jeff",
                  "password": "$uper$ecure"
                }
              references:
                auth_method_id: boundary_auth_method.password.id
              dependencies:
                boundary_auth_method.password: |-
                    {
                      "scope_id": "${boundary_scope.org.id}",
                      "type": "password"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
        argumentDocs:
            auth_method_id: (String) The resource ID for the auth method.
            description: (String) The account description.
            id: (String) The ID of the account.
            login_name: (String) The login name for this account.
            name: (String) The account name. Defaults to the resource name.
            password: (String, Sensitive) The account password. Only set on create, changes will not be reflected when updating account.
            type: (String, Deprecated) The resource type.
        importStatements:
            - terraform import boundary_account_password.foo <my-id>
    boundary_alias_target:
        subCategory: ""
        description: The target alias resource allows you to configure a Boundary target alias.
        name: boundary_alias_target
        title: boundary_alias_target Resource - terraform-provider-boundary
        examples:
            - name: example_alias_target
              manifest: |-
                {
                  "authorize_session_host_id": "${boundary_host_static.bar.id}",
                  "description": "Example alias to target foo using host boundary_host_static.bar",
                  "destination_id": "${boundary_target.foo.id}",
                  "name": "example_alias_target",
                  "scope_id": "global",
                  "value": "example.bar.foo.boundary"
                }
              references:
                authorize_session_host_id: boundary_host_static.bar.id
                destination_id: boundary_target.foo.id
              dependencies:
                boundary_host_catalog_static.foo: |-
                    {
                      "description": "test catalog",
                      "name": "test",
                      "scope_id": "${boundary_scope.project.id}"
                    }
                boundary_host_set_static.foo: |-
                    {
                      "host_catalog_id": "${boundary_host_catalog_static.foo.id}",
                      "host_ids": [
                        "${boundary_host_static.foo.id}",
                        "${boundary_host_static.bar.id}"
                      ],
                      "name": "foo"
                    }
                boundary_host_static.bar: |-
                    {
                      "address": "127.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog_static.foo.id}",
                      "name": "bar"
                    }
                boundary_host_static.foo: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog_static.foo.id}",
                      "name": "foo"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "global scope",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_target.foo: |-
                    {
                      "default_port": "22",
                      "description": "Foo target",
                      "host_source_ids": [
                        "${boundary_host_set_static.foo.id}"
                      ],
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "type": "tcp"
                    }
        argumentDocs:
            authorize_session_host_id: (String) The host id to pass to Boundary when performing an authorize session action.
            description: (String) The alias description.
            destination_id: (String) The destination of the alias.
            id: (String) The ID of the account.
            name: (String) The alias name. Defaults to the resource name.
            scope_id: (String) The scope ID.
            type: (String) The type of alias; hardcoded.
            value: (String) The value of the alias.
        importStatements:
            - terraform import boundary_alias_target.example_alias_target <my-id>
    boundary_auth_method:
        subCategory: ""
        description: The auth method resource allows you to configure a Boundary auth_method.
        name: boundary_auth_method
        title: boundary_auth_method Resource - terraform-provider-boundary
        examples:
            - name: password
              manifest: |-
                {
                  "scope_id": "${boundary_scope.org.id}",
                  "type": "password"
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
        argumentDocs:
            description: (String) The auth method description.
            id: (String) The ID of the account.
            min_login_name_length: (Number, Deprecated) The minimum login name length.
            min_password_length: (Number, Deprecated) The minimum password length.
            name: (String) The auth method name. Defaults to the resource name.
            scope_id: (String) The scope ID.
            type: (String) The resource type.
        importStatements:
            - terraform import boundary_auth_method.foo <my-id>
    boundary_auth_method_ldap:
        subCategory: ""
        description: The LDAP auth method resource allows you to configure a Boundary authmethodldap.
        name: boundary_auth_method_ldap
        title: boundary_auth_method_ldap Resource - terraform-provider-boundary
        examples:
            - name: forumsys_ldap
              manifest: |-
                {
                  "bind_dn": "cn=read-only-admin,dc=example,dc=com",
                  "bind_password": "password",
                  "discover_dn": true,
                  "enable_groups": true,
                  "group_dn": "dc=example,dc=com",
                  "name": "forumsys public LDAP",
                  "scope_id": "global",
                  "state": "active-public",
                  "urls": [
                    "ldap://ldap.forumsys.com"
                  ],
                  "user_attr": "uid",
                  "user_dn": "dc=example,dc=com"
                }
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
        argumentDocs:
            account_attribute_maps: (List of String) Account attribute maps fullname and email.
            anon_group_search: (Boolean) Use anon bind when performing LDAP group searches (optional).
            bind_dn: (String) The distinguished name of entry to bind when performing user and group searches (optional).
            bind_password: (String) The password to use along with bind-dn performing user and group searches (optional).
            bind_password_hmac: (String) The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
            certificates: (List of String) PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
            client_certificate: (String) PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
            client_certificate_key: '(String) PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).'
            client_certificate_key_hmac: (String) The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
            dereference_aliases: '(String) Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).'
            description: (String) The auth method description.
            discover_dn: (Boolean) Use anon bind to discover the bind DN of a user (optional).
            enable_groups: (Boolean) Find the authenticated user's groups during authentication (optional).
            group_attr: (String) The attribute that enumerates a user's group membership from entries returned by a group search (optional).
            group_dn: (String) The base DN under which to perform group search.
            group_filter: (String) A go template used to construct a LDAP group search filter (optional).
            id: (String) The ID of the auth method.
            insecure_tls: (Boolean) Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
            is_primary_for_scope: (Boolean) When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
            maximum_page_size: (Number) MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
            name: (String) The auth method name. Defaults to the resource name.
            scope_id: (String) The scope ID.
            start_tls: (Boolean) Issue StartTLS command after connecting (optional).
            state: (String) Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
            type: (String) The type of auth method; hardcoded.
            upn_domain: (String) The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
            urls: (List of String) The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
            use_token_groups: (Boolean) Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
            user_attr: (String) The attribute on user entry matching the username passed when authenticating (optional).
            user_dn: (String) The base DN under which to perform user search (optional).
            user_filter: (String) A go template used to construct a LDAP user search filter (optional).
        importStatements:
            - terraform import boundary_auth_method_ldap.foo <my-id>
    boundary_auth_method_oidc:
        subCategory: ""
        description: The OIDC auth method resource allows you to configure a Boundary authmethodoidc.
        name: boundary_auth_method_oidc
        title: boundary_auth_method_oidc Resource - terraform-provider-boundary
        examples:
            - name: vault
              manifest: |-
                {
                  "api_url_prefix": "https://XO-XO-XO-XO-XOXOXO.boundary.hashicorp.cloud:9200",
                  "client_id": "eieio",
                  "client_secret": "hvo_secret_XO",
                  "description": "My Boundary OIDC Auth Method for Vault",
                  "issuer": "https://XO-XO-XO-XO-XOXOXO.vault.hashicorp.cloud:8200/v1/identity/oidc/provider/my-provider",
                  "scope_id": "global",
                  "signing_algorithms": [
                    "RS256"
                  ],
                  "type": "oidc"
                }
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
            - name: oidc_with_one_prompt
              manifest: |-
                {
                  "api_url_prefix": "https://XO-XO-XO-XO-XOXOXO.boundary.hashicorp.cloud:9200",
                  "client_id": "eieio",
                  "client_secret": "hvo_secret_XO",
                  "description": "My Boundary OIDC Auth Method With Prompt",
                  "issuer": "https://sts.windows.net/TENANT_ID/",
                  "prompts": [
                    "select_account"
                  ],
                  "scope_id": "global",
                  "signing_algorithms": [
                    "RS256"
                  ],
                  "type": "oidc"
                }
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
            - name: oidc_with_multiple_prompts
              manifest: |-
                {
                  "api_url_prefix": "https://XO-XO-XO-XO-XOXOXO.boundary.hashicorp.cloud:9200",
                  "client_id": "eieio",
                  "client_secret": "hvo_secret_XO",
                  "description": "My Boundary OIDC Auth Method With Multiple Prompts",
                  "issuer": "https://sts.windows.net/TENANT_ID/",
                  "prompts": [
                    "consent",
                    "select_account"
                  ],
                  "scope_id": "global",
                  "signing_algorithms": [
                    "RS256"
                  ],
                  "type": "oidc"
                }
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
        argumentDocs:
            account_claim_maps: (List of String) Account claim maps for the to_claim of sub.
            allowed_audiences: (List of String) Audiences for which the provider responses will be allowed
            api_url_prefix: (String) The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
            callback_url: (String) The URL that should be provided to the IdP for callbacks.
            claims_scopes: (List of String) Claims scopes.
            client_id: (String) The client ID assigned to this auth method from the provider.
            client_secret: (String, Sensitive) The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
            client_secret_hmac: (String) The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
            description: (String) The auth method description.
            disable_discovered_config_validation: (Boolean) Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
            id: (String) The ID of the auth method.
            idp_ca_certs: (List of String) A list of CA certificates to trust when validating the IdP's token signatures.
            is_primary_for_scope: (Boolean) When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the user will be automatically created when they login using an OIDC account.
            issuer: (String) The issuer corresponding to the provider, which must match the issuer field in generated tokens.
            max_age: (Number) The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again. A value of 0 sets an immediate requirement for all users to reauthenticate, and an unset maxAge results in a Terraform value of -1 and the default TTL of the chosen OIDC will be used.
            name: (String) The auth method name. Defaults to the resource name.
            prompts: '(List of String) The prompts passed to the identity provider to determine whether to prompt the end-user for reauthentication, account selection or consent. Please note the values passed are case-sensitive. The valid values are: none, login, consent and select_account.'
            scope_id: (String) The scope ID.
            signing_algorithms: (List of String) Allowed signing algorithms for the provider's issued tokens.
            state: (String) Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
            type: (String) The type of auth method; hardcoded.
        importStatements:
            - terraform import boundary_auth_method_oidc.foo <my-id>
    boundary_auth_method_password Resource - terraform-provider-boundary:
        subCategory: ""
        description: The auth method resource allows you to configure a Boundary authmethodpassword.
        name: boundary_auth_method_password Resource - terraform-provider-boundary
        title: boundary_auth_method_password Resource - terraform-provider-boundary
        argumentDocs:
            description: (String) The auth method description.
            id: (String) The ID of the account.
            min_login_name_length: (Number) The minimum login name length.
            min_password_length: (Number) The minimum password length.
            name: (String) The auth method name. Defaults to the resource name.
            scope_id: (String) The scope ID.
            type: (String) The resource type, hardcoded per resource
        importStatements: []
    boundary_credential_json:
        subCategory: ""
        description: The json credential resource allows you to congiure a credential using a json object.
        name: boundary_credential_json
        title: boundary_credential_json Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_static.example.id}",
                  "description": "My first json credential!",
                  "name": "example_json",
                  "object": "${file(\"~/object.json\")}"
                }
              references:
                credential_store_id: boundary_credential_store_static.example.id
              dependencies:
                boundary_credential_store_static.example: |-
                    {
                      "description": "My first static credential store!",
                      "name": "example_static_credential_store",
                      "scope_id": "${boundary_scope.project.id}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "global scope",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            credential_store_id: (String) The credential store in which to save this json credential.
            description: (String) The description of this json credential.
            id: (String) The ID of this json credential.
            name: (String) The name of this json credential. Defaults to the resource name.
            object: (String, Sensitive) The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
            object_hmac: (String) The object hmac.
        importStatements:
            - terraform import boundary_credential_json.example_json <my-id>
    boundary_credential_library_vault:
        subCategory: ""
        description: The credential library for Vault resource allows you to configure a Boundary credential library for Vault.
        name: boundary_credential_library_vault
        title: boundary_credential_library_vault Resource - terraform-provider-boundary
        examples:
            - name: foo
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                  "description": "My first Vault credential library!",
                  "http_method": "GET",
                  "name": "foo",
                  "path": "my/secret/foo"
                }
              references:
                credential_store_id: boundary_credential_store_vault.foo.id
              dependencies:
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: bar
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                  "description": "My second Vault credential library!",
                  "http_method": "POST",
                  "http_request_body": "{\n  \"key\": \"Value\",\n}\n",
                  "name": "bar",
                  "path": "my/secret/bar"
                }
              references:
                credential_store_id: boundary_credential_store_vault.foo.id
              dependencies:
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: baz
              manifest: |-
                {
                  "credential_mapping_overrides": {
                    "password_attribute": "alternative_password_label",
                    "username_attribute": "alternative_username_label"
                  },
                  "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                  "credential_type": "username_password",
                  "description": "vault username password credential with mapping overrides",
                  "http_method": "GET",
                  "name": "baz",
                  "path": "my/secret/baz"
                }
              references:
                credential_store_id: boundary_credential_store_vault.foo.id
              dependencies:
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: quz
              manifest: |-
                {
                  "credential_mapping_overrides": {
                    "private_key_attribute": "alternative_key_label",
                    "private_key_passphrase_attribute": "alternative_passphrase_label",
                    "username_attribute": "alternative_username_label"
                  },
                  "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                  "credential_type": "ssh_private_key",
                  "description": "vault ssh private key credential with mapping overrides",
                  "http_method": "GET",
                  "name": "quz",
                  "path": "my/secret/quz"
                }
              references:
                credential_store_id: boundary_credential_store_vault.foo.id
              dependencies:
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            credential_mapping_overrides: (Map of String) The credential mapping override.
            credential_store_id: (String) The ID of the credential store that this library belongs to.
            credential_type: (String) The type of credential the library generates. Cannot be updated on an existing resource.
            description: (String) The Vault credential library description.
            http_method: (String) The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
            http_request_body: (String) The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if http_method is set to POST.
            id: (String) The ID of the Vault credential library.
            name: (String) The Vault credential library name. Defaults to the resource name.
            path: (String) The path in Vault to request credentials from.
        importStatements:
            - terraform import boundary_credential_library_vault.foo <my-id>
    boundary_credential_library_vault_ssh_certificate:
        subCategory: ""
        description: The credential library for Vault resource allows you to configure a Boundary credential library for Vault.
        name: boundary_credential_library_vault_ssh_certificate
        title: boundary_credential_library_vault_ssh_certificate Resource - terraform-provider-boundary
        examples:
            - name: foo
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                  "description": "My first Vault SSH certificate credential library!",
                  "name": "foo",
                  "path": "ssh/sign/foo",
                  "username": "foo"
                }
              references:
                credential_store_id: boundary_credential_store_vault.foo.id
              dependencies:
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: bar
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                  "description": "My second Vault SSH certificate credential library!",
                  "extensions": {
                    "permit-pty": ""
                  },
                  "key_bits": 384,
                  "key_type": "ecdsa",
                  "name": "bar",
                  "path": "ssh/sign/foo",
                  "username": "foo"
                }
              references:
                credential_store_id: boundary_credential_store_vault.foo.id
              dependencies:
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: baz
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                  "critical_options": {
                    "force-command": "/bin/some_script"
                  },
                  "description": "vault ",
                  "extensions": {
                    "permit-X11-forwarding": "",
                    "permit-pty": ""
                  },
                  "key_bits": 4096,
                  "key_type": "rsa",
                  "name": "baz",
                  "path": "ssh/issue/foo",
                  "username": "foo"
                }
              references:
                credential_store_id: boundary_credential_store_vault.foo.id
              dependencies:
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "foo",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            additional_valid_principals: (List of String) Principals to be signed as "valid_principles" in addition to username.
            credential_store_id: (String) The ID of the credential store that this library belongs to.
            critical_options: (Map of String) Specifies a map of the critical options that the certificate should be signed for.
            description: (String) The Vault credential library description.
            extensions: (Map of String) Specifies a map of the extensions that the certificate should be signed for.
            id: (String) The ID of the Vault credential library.
            key_bits: (Number) Specifies the number of bits to use for the generated keys.
            key_id: (String) Specifies the key id a certificate should have.
            key_type: (String) Specifies the desired key type; must be ed25519, ecdsa, or rsa.
            name: (String) The Vault credential library name. Defaults to the resource name.
            path: (String) The path in Vault to request credentials from.
            ttl: (String) Specifies the requested time to live for a certificate returned from the library.
            username: (String) The username to use with the certificate returned by the library.
        importStatements:
            - terraform import boundary_credential_library_vault_ssh_certificate.foo <my-id>
    boundary_credential_ssh_private_key:
        subCategory: ""
        description: The SSH private key credential resource allows you to configure a credential using a username, private key and optional passphrase.
        name: boundary_credential_ssh_private_key
        title: boundary_credential_ssh_private_key Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_static.example.id}",
                  "description": "My first ssh private key credential!",
                  "name": "example_ssh_private_key",
                  "private_key": "${file(\"~/.ssh/id_rsa\")}",
                  "private_key_passphrase": "optional-passphrase",
                  "username": "my-username"
                }
              references:
                credential_store_id: boundary_credential_store_static.example.id
              dependencies:
                boundary_credential_store_static.example: |-
                    {
                      "description": "My first static credential store!",
                      "name": "example_static_credential_store",
                      "scope_id": "${boundary_scope.project.id}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "global scope",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            credential_store_id: (String) ID of the credential store this credential belongs to.
            description: (String) The description of the credential.
            id: (String) The ID of the credential.
            name: (String) The name of the credential. Defaults to the resource name.
            private_key: (String, Sensitive) The private key associated with the credential.
            private_key_hmac: (String) The private key hmac.
            private_key_passphrase: (String, Sensitive) The passphrase of the private key associated with the credential.
            private_key_passphrase_hmac: (String) The private key passphrase hmac.
            username: (String) The username associated with the credential.
        importStatements:
            - terraform import boundary_credential_ssh_private_key.example_ssh_private_key <my-id>
    boundary_credential_store_static:
        subCategory: ""
        description: The static credential store resource allows you to configure a Boundary static credential store.
        name: boundary_credential_store_static
        title: boundary_credential_store_static Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "description": "My first static credential store!",
                  "name": "example_static_credential_store",
                  "scope_id": "${boundary_scope.project.id}"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "global scope",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            description: (String) The static credential store description.
            id: (String) The ID of the static credential store.
            name: (String) The static credential store name. Defaults to the resource name.
            scope_id: (String) The scope for this credential store.
        importStatements:
            - terraform import boundary_credential_store_static.example_static_credential_store <my-id>
    boundary_credential_store_vault:
        subCategory: ""
        description: The credential store for Vault resource allows you to configure a Boundary credential store for Vault.
        name: boundary_credential_store_vault
        title: boundary_credential_store_vault Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "address": "http://127.0.0.1:8200",
                  "description": "My first Vault credential store!",
                  "name": "foo",
                  "scope_id": "${boundary_scope.project.id}",
                  "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            address: (String) The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
            ca_cert: (String) A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
            client_certificate: (String) A PEM-encoded client certificate to use for TLS authentication to the Vault server.
            client_certificate_key: (String, Sensitive) A PEM-encoded private key matching the client certificate from 'client_certificate'.
            client_certificate_key_hmac: (String) The Vault client certificate key hmac.
            description: (String) The Vault credential store description.
            id: (String) The ID of the Vault credential store.
            name: (String) The Vault credential store name. Defaults to the resource name.
            namespace: (String) The namespace within Vault to use.
            scope_id: (String) The scope for this credential store.
            tls_server_name: (String) Name to use as the SNI host when connecting to Vault via TLS.
            tls_skip_verify: (Boolean) Whether or not to skip TLS verification.
            token: (String, Sensitive) A token used for accessing Vault.
            token_hmac: (String) The Vault token hmac.
            worker_filter: (String) HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault instances with Boundary.
        importStatements:
            - terraform import boundary_credential_store_vault.foo <my-id>
    boundary_credential_username_password:
        subCategory: ""
        description: The username/password credential resource allows you to configure a credential using a username and password pair.
        name: boundary_credential_username_password
        title: boundary_credential_username_password Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "credential_store_id": "${boundary_credential_store_static.example.id}",
                  "description": "My first username password credential!",
                  "name": "example_username_password",
                  "password": "my-password",
                  "username": "my-username"
                }
              references:
                credential_store_id: boundary_credential_store_static.example.id
              dependencies:
                boundary_credential_store_static.example: |-
                    {
                      "description": "My first static credential store!",
                      "name": "example_static_credential_store",
                      "scope_id": "${boundary_scope.project.id}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "global scope",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            credential_store_id: (String) The credential store in which to save this username/password credential.
            description: (String) The description of this username/password credential.
            id: (String) The ID of this username/password credential.
            name: (String) The name of this username/password credential. Defaults to the resource name.
            password: (String, Sensitive) The password of this username/password credential.
            password_hmac: (String) The password hmac.
            username: (String) The username of this username/password credential.
        importStatements:
            - terraform import boundary_credential_username_password.example_username_password <my-id>
    boundary_group:
        subCategory: ""
        description: The group resource allows you to configure a Boundary group.
        name: boundary_group
        title: boundary_group Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "description": "My first group!",
                  "member_ids": [
                    "${boundary_user.foo.id}"
                  ],
                  "name": "My group",
                  "scope_id": "${boundary_scope.org.id}"
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_user.foo: |-
                    {
                      "description": "foo user",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: example
              manifest: |-
                {
                  "description": "My first group!",
                  "member_ids": [
                    "${boundary_user.foo.id}"
                  ],
                  "name": "My group",
                  "scope_id": "${boundary_scope.project.id}"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_user.foo: |-
                    {
                      "description": "foo user",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            description: (String) The group description.
            id: (String) The ID of the group.
            member_ids: (Set of String) Resource IDs for group members, these are most likely boundary users.
            name: (String) The group name. Defaults to the resource name.
            scope_id: (String) The scope ID in which the resource is created. Defaults to the provider's default_scope if unset.
        importStatements:
            - terraform import boundary_group.foo <my-id>
    boundary_host:
        subCategory: ""
        description: 'Deprecated: use boundary_host_static instead.'
        name: boundary_host
        title: boundary_host Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "address": "10.0.0.1",
                  "description": "My first host!",
                  "host_catalog_id": "${boundary_host_catalog.static.id}",
                  "name": "example_host",
                  "type": "static"
                }
              references:
                host_catalog_id: boundary_host_catalog.static.id
              dependencies:
                boundary_host_catalog.static: |-
                    {
                      "description": "My first host catalog!",
                      "name": "My catalog",
                      "scope_id": "${boundary_scope.project.id}",
                      "type": "static"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            address: '(String) The static address of the host resource as <IP> (note: port assignment occurs in the target resource definition, do not add :port here) or a domain name.'
            description: (String) The host description.
            host_catalog_id: (String)
            id: (String) The ID of the host.
            name: (String) The host name. Defaults to the resource name.
            type: (String) The type of host
        importStatements:
            - terraform import boundary_host.foo <my-id>
    boundary_host_catalog:
        subCategory: ""
        description: 'Deprecated: use boundary_host_catalog_static instead.'
        name: boundary_host_catalog
        title: boundary_host_catalog Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "description": "My first host catalog!",
                  "name": "My catalog",
                  "scope_id": "${boundary_scope.project.id}",
                  "type": "Static"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            description: (String) The host catalog description.
            id: (String) The ID of the host catalog.
            name: (String) The host catalog name. Defaults to the resource name.
            scope_id: (String) The scope ID in which the resource is created.
            type: (String) The host catalog type. Only static is supported.
        importStatements:
            - terraform import boundary_host_catalog.foo <my-id>
    boundary_host_catalog_plugin:
        subCategory: ""
        description: The host catalog resource allows you to configure a Boundary plugin-type host catalog. Host catalogs are always part of a project, so a project resource should be used inline or you should have the project ID in hand to successfully configure a host catalog.
        name: boundary_host_catalog_plugin
        title: boundary_host_catalog_plugin Resource - terraform-provider-boundary
        examples:
            - name: aws_example
              manifest: |-
                {
                  "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                  "description": "My first host catalog!",
                  "name": "My aws catalog",
                  "plugin_name": "aws",
                  "scope_id": "${boundary_scope.project.id}",
                  "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: azure_example
              manifest: |-
                {
                  "attributes_json": "${jsonencode({\n    \"disable_credential_rotation\" = \"true\",\n    \"tenant_id\"                   = \"ARM_TENANT_ID\",\n    \"subscription_id\"             = \"ARM_SUBSCRIPTION_ID\",\n    \"client_id\"                   = \"ARM_CLIENT_ID\"\n  })}",
                  "description": "My second host catalog!",
                  "name": "My azure catalog",
                  "plugin_name": "azure",
                  "scope_id": "${boundary_scope.project.id}",
                  "secrets_json": "${jsonencode({\n    \"secret_value\" = \"ARM_CLIENT_SECRET\"\n  })}"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            attributes_json: (String) The attributes for the host catalog. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the host catalog.
            description: (String) The host catalog description.
            id: (String) The ID of the host catalog.
            internal_force_update: (String) Internal only. Used to force update so that we can always check the value of secrets.
            internal_hmac_used_for_secrets_config_hmac: (String) Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift detection.
            internal_secrets_config_hmac: (String) Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.
            name: (String) The host catalog name. Defaults to the resource name.
            plugin_id: (String) The ID of the plugin that should back the resource. This or plugin_name must be defined.
            plugin_name: (String) The name of the plugin that should back the resource. This or plugin_id must be defined.
            scope_id: (String) The scope ID in which the resource is created.
            secrets_hmac: (String) The HMAC'd secrets value returned from the server.
            secrets_json: '(String, Sensitive) The secrets for the host catalog. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" to clear any existing values. NOTE: Unlike "attributes_json", removing this block will NOT clear secrets from the host catalog; this allows injecting secrets for one call, then removing them for storage.'
        importStatements:
            - terraform import boundary_host_catalog_plugin.foo <my-id>
    boundary_host_catalog_static:
        subCategory: ""
        description: The static host catalog resource allows you to configure a Boundary static-type host catalog. Host catalogs are always part of a project, so a project resource should be used inline or you should have the project ID in hand to successfully configure a host catalog.
        name: boundary_host_catalog_static
        title: boundary_host_catalog_static Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "description": "My first host catalog!",
                  "name": "My catalog",
                  "scope_id": "${boundary_scope.project.id}"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            description: (String) The host catalog description.
            id: (String) The ID of the host catalog.
            name: (String) The host catalog name. Defaults to the resource name.
            scope_id: (String) The scope ID in which the resource is created.
        importStatements:
            - terraform import boundary_host_catalog_static.foo <my-id>
    boundary_host_set:
        subCategory: ""
        description: 'Deprecated: use boundary_host_set_static instead.'
        name: boundary_host_set
        title: boundary_host_set Resource - terraform-provider-boundary
        examples:
            - name: web
              manifest: |-
                {
                  "host_catalog_id": "${boundary_host_catalog.static.id}",
                  "host_ids": [
                    "${boundary_host.first.id}",
                    "${boundary_host.second.id}"
                  ],
                  "type": "static"
                }
              references:
                host_catalog_id: boundary_host_catalog.static.id
              dependencies:
                boundary_host.first: |-
                    {
                      "address": "10.0.0.1",
                      "description": "My first host!",
                      "host_catalog_id": "${boundary_host_catalog.static.id}",
                      "name": "host_1",
                      "type": "static"
                    }
                boundary_host.second: |-
                    {
                      "address": "10.0.0.2",
                      "description": "My second host!",
                      "host_catalog_id": "${boundary_host_catalog.static.id}",
                      "name": "host_2",
                      "type": "static"
                    }
                boundary_host_catalog.static: |-
                    {
                      "scope_id": "${boundary_scope.project.id}",
                      "type": "static"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            description: (String) The host set description.
            host_catalog_id: (String) The catalog for the host set.
            host_ids: (Set of String) The list of host IDs contained in this set.
            id: (String) The ID of the host set.
            name: (String) The host set name. Defaults to the resource name.
            type: (String) The type of host set
        importStatements:
            - terraform import boundary_host_set.foo <my-id>
    boundary_host_set_plugin:
        subCategory: ""
        description: The hostsetplugin resource allows you to configure a Boundary host set. Host sets are always part of a host catalog, so a host catalog resource should be used inline or you should have the host catalog ID in hand to successfully configure a host set.
        name: boundary_host_set_plugin
        title: boundary_host_set_plugin Resource - terraform-provider-boundary
        examples:
            - name: web
              manifest: |-
                {
                  "attributes_json": "${jsonencode({ \"filters\" = [\"tag:service-type=web\"] })}",
                  "host_catalog_id": "${boundary_host_catalog_plugin.aws_example.id}",
                  "name": "My web host set plugin"
                }
              references:
                host_catalog_id: boundary_host_catalog_plugin.aws_example.id
              dependencies:
                boundary_host_catalog_plugin.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "description": "My first host catalog!",
                      "name": "My aws catalog",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}"
                    }
                boundary_host_catalog_plugin.azure_example: |-
                    {
                      "attributes_json": "${jsonencode({\n    \"disable_credential_rotation\" = \"true\",\n    \"tenant_id\"                   = \"ARM_TENANT_ID\",\n    \"subscription_id\"             = \"ARM_SUBSCRIPTION_ID\",\n    \"client_id\"                   = \"ARM_CLIENT_ID\"\n  })}",
                      "description": "My second host catalog!",
                      "name": "My azure catalog",
                      "plugin_name": "azure",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"secret_value\" = \"ARM_CLIENT_SECRET\"\n  })}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: foobar
              manifest: |-
                {
                  "attributes_json": "${jsonencode({\n    \"filters\" = [\"tag-key=foo\", \"tag-key=bar\"]\n  })}",
                  "host_catalog_id": "${boundary_host_catalog_plugin.aws_example.id}",
                  "name": "My foobar host set plugin",
                  "preferred_endpoints": [
                    "cidr:54.0.0.0/8"
                  ]
                }
              references:
                host_catalog_id: boundary_host_catalog_plugin.aws_example.id
              dependencies:
                boundary_host_catalog_plugin.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "description": "My first host catalog!",
                      "name": "My aws catalog",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}"
                    }
                boundary_host_catalog_plugin.azure_example: |-
                    {
                      "attributes_json": "${jsonencode({\n    \"disable_credential_rotation\" = \"true\",\n    \"tenant_id\"                   = \"ARM_TENANT_ID\",\n    \"subscription_id\"             = \"ARM_SUBSCRIPTION_ID\",\n    \"client_id\"                   = \"ARM_CLIENT_ID\"\n  })}",
                      "description": "My second host catalog!",
                      "name": "My azure catalog",
                      "plugin_name": "azure",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"secret_value\" = \"ARM_CLIENT_SECRET\"\n  })}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: launch
              manifest: |-
                {
                  "attributes_json": "${jsonencode({\n    \"filters\" = [\"tag:development=prod,dev\", \"launch-time=2022-01-04T*\"]\n  })}",
                  "host_catalog_id": "${boundary_host_catalog_plugin.aws_example.id}",
                  "name": "My launch host set plugin",
                  "sync_interval_seconds": 60
                }
              references:
                host_catalog_id: boundary_host_catalog_plugin.aws_example.id
              dependencies:
                boundary_host_catalog_plugin.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "description": "My first host catalog!",
                      "name": "My aws catalog",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}"
                    }
                boundary_host_catalog_plugin.azure_example: |-
                    {
                      "attributes_json": "${jsonencode({\n    \"disable_credential_rotation\" = \"true\",\n    \"tenant_id\"                   = \"ARM_TENANT_ID\",\n    \"subscription_id\"             = \"ARM_SUBSCRIPTION_ID\",\n    \"client_id\"                   = \"ARM_CLIENT_ID\"\n  })}",
                      "description": "My second host catalog!",
                      "name": "My azure catalog",
                      "plugin_name": "azure",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"secret_value\" = \"ARM_CLIENT_SECRET\"\n  })}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: database
              manifest: |-
                {
                  "attributes_json": "${jsonencode({ \"filter\" = \"tagName eq 'service-type' and tagValue eq 'database'\" })}",
                  "host_catalog_id": "${boundary_host_catalog_plugin.azure_example.id}",
                  "name": "My database host set plugin"
                }
              references:
                host_catalog_id: boundary_host_catalog_plugin.azure_example.id
              dependencies:
                boundary_host_catalog_plugin.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "description": "My first host catalog!",
                      "name": "My aws catalog",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}"
                    }
                boundary_host_catalog_plugin.azure_example: |-
                    {
                      "attributes_json": "${jsonencode({\n    \"disable_credential_rotation\" = \"true\",\n    \"tenant_id\"                   = \"ARM_TENANT_ID\",\n    \"subscription_id\"             = \"ARM_SUBSCRIPTION_ID\",\n    \"client_id\"                   = \"ARM_CLIENT_ID\"\n  })}",
                      "description": "My second host catalog!",
                      "name": "My azure catalog",
                      "plugin_name": "azure",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"secret_value\" = \"ARM_CLIENT_SECRET\"\n  })}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: foodev
              manifest: |-
                {
                  "attributes_json": "${jsonencode({\n    \"filter\" = \"tagName eq 'tag-key' and tagValue eq 'foo'\",\n    \"filter\" = \"tagName eq 'application' and tagValue eq 'dev'\",\n  })}",
                  "host_catalog_id": "${boundary_host_catalog_plugin.azure_example.id}",
                  "name": "My foodev host set plugin",
                  "preferred_endpoints": [
                    "cidr:54.0.0.0/8"
                  ],
                  "sync_interval_seconds": 60
                }
              references:
                host_catalog_id: boundary_host_catalog_plugin.azure_example.id
              dependencies:
                boundary_host_catalog_plugin.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "description": "My first host catalog!",
                      "name": "My aws catalog",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}"
                    }
                boundary_host_catalog_plugin.azure_example: |-
                    {
                      "attributes_json": "${jsonencode({\n    \"disable_credential_rotation\" = \"true\",\n    \"tenant_id\"                   = \"ARM_TENANT_ID\",\n    \"subscription_id\"             = \"ARM_SUBSCRIPTION_ID\",\n    \"client_id\"                   = \"ARM_CLIENT_ID\"\n  })}",
                      "description": "My second host catalog!",
                      "name": "My azure catalog",
                      "plugin_name": "azure",
                      "scope_id": "${boundary_scope.project.id}",
                      "secrets_json": "${jsonencode({\n    \"secret_value\" = \"ARM_CLIENT_SECRET\"\n  })}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            attributes_json: (String) The attributes for the host set. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the host set.
            description: (String) The host set description.
            host_catalog_id: (String) The catalog for the host set.
            id: (String) The ID of the host set.
            name: (String) The host set name. Defaults to the resource name.
            preferred_endpoints: (List of String) The ordered list of preferred endpoints.
            sync_interval_seconds: (Number) The value to set for the sync interval seconds.
            type: (String) The type of host set
        importStatements:
            - terraform import boundary_host_set_plugin.foo <my-id>
    boundary_host_set_static:
        subCategory: ""
        description: The hostsetstatic resource allows you to configure a Boundary host set. Host sets are always part of a host catalog, so a host catalog resource should be used inline or you should have the host catalog ID in hand to successfully configure a host set.
        name: boundary_host_set_static
        title: boundary_host_set_static Resource - terraform-provider-boundary
        examples:
            - name: web
              manifest: |-
                {
                  "host_catalog_id": "${boundary_host_catalog_static.example.id}",
                  "host_ids": [
                    "${boundary_host_static.first.id}",
                    "${boundary_host_static.second.id}"
                  ]
                }
              references:
                host_catalog_id: boundary_host_catalog_static.example.id
              dependencies:
                boundary_host_catalog_static.example: |-
                    {
                      "scope_id": "${boundary_scope.project.id}"
                    }
                boundary_host_static.first: |-
                    {
                      "address": "10.0.0.1",
                      "description": "My first host!",
                      "host_catalog_id": "${boundary_host_catalog_static.example.id}",
                      "name": "host_1"
                    }
                boundary_host_static.second: |-
                    {
                      "address": "10.0.0.2",
                      "description": "My second host!",
                      "host_catalog_id": "${boundary_host_catalog_static.example.id}",
                      "name": "host_2"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            description: (String) The host set description.
            host_catalog_id: (String) The catalog for the host set.
            host_ids: (Set of String) The list of host IDs contained in this set.
            id: (String) The ID of the host set.
            name: (String) The host set name. Defaults to the resource name.
            type: (String) The type of host set
        importStatements:
            - terraform import boundary_host_set_static.foo <my-id>
    boundary_host_static:
        subCategory: ""
        description: The static host resource allows you to configure a Boundary static host. Hosts are always part of a project, so a project resource should be used inline or you should have the project ID in hand to successfully configure a host.
        name: boundary_host_static
        title: boundary_host_static Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "address": "10.0.0.1",
                  "description": "My first host!",
                  "host_catalog_id": "${boundary_host_catalog_static.example.id}",
                  "name": "example_host"
                }
              references:
                host_catalog_id: boundary_host_catalog_static.example.id
              dependencies:
                boundary_host_catalog_static.example: |-
                    {
                      "description": "My first host catalog!",
                      "name": "My catalog",
                      "scope_id": "${boundary_scope.project.id}"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            address: '(String) The static address of the host resource as <IP> (note: port assignment occurs in the target resource definition, do not add :port here) or a domain name.'
            description: (String) The host description.
            host_catalog_id: (String)
            id: (String) The ID of the host.
            name: (String) The host name. Defaults to the resource name.
            type: (String) The type of host
        importStatements:
            - terraform import boundary_host_static.foo <my-id>
    boundary_managed_group Resource - terraform-provider-boundary:
        subCategory: ""
        description: The managed group resource allows you to configure a Boundary group.
        name: boundary_managed_group Resource - terraform-provider-boundary
        title: boundary_managed_group Resource - terraform-provider-boundary
        argumentDocs:
            auth_method_id: (String) The resource ID for the auth method.
            description: (String) The managed group description.
            filter: (String) Boolean expression to filter the workers for this managed group.
            id: (String) The ID of the group.
            name: (String) The managed group name. Defaults to the resource name.
        importStatements: []
    boundary_managed_group_ldap:
        subCategory: ""
        description: The managed group resource allows you to configure a Boundary group.
        name: boundary_managed_group_ldap
        title: boundary_managed_group_ldap Resource - terraform-provider-boundary
        examples:
            - name: forumsys_scientists
              manifest: |-
                {
                  "auth_method_id": "${boundary_auth_method_ldap.forumsys_ldap.id}",
                  "description": "forumsys scientists managed group",
                  "group_names": [
                    "Scientists"
                  ],
                  "name": "scientists"
                }
              references:
                auth_method_id: boundary_auth_method_ldap.forumsys_ldap.id
              dependencies:
                boundary_auth_method_ldap.forumsys_ldap: |-
                    {
                      "bind_dn": "cn=read-only-admin,dc=example,dc=com",
                      "bind_password": "password",
                      "discover_dn": true,
                      "enable_groups": true,
                      "group_dn": "dc=example,dc=com",
                      "name": "forumsys public LDAP",
                      "scope_id": "global",
                      "state": "active-public",
                      "urls": [
                        "ldap://ldap.forumsys.com"
                      ],
                      "user_attr": "uid",
                      "user_dn": "dc=example,dc=com"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
        argumentDocs:
            auth_method_id: (String) The resource ID for the auth method.
            description: (String) The managed group description.
            group_names: (List of String) The list of groups that make up the managed group.
            id: (String) The ID of the group.
            name: (String) The managed group name. Defaults to the resource name.
        importStatements:
            - terraform import boundary_managed_group_ldap.foo <my-id>
    boundary_policy_storage Resource - terraform-provider-boundary:
        subCategory: ""
        description: The storage policy resource allows you to configure a Boundary storage policy. Storage policies allow an admin to configure how long session recordings must be stored and when to delete them. Storage policies must be applied to the global scope or an org scope in order to take effect.
        name: boundary_policy_storage Resource - terraform-provider-boundary
        title: boundary_policy_storage Resource - terraform-provider-boundary
        argumentDocs:
            delete_after_days: '(Number) The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete_after_days and retain_for_days cannot both be 0.'
            delete_after_overridable: '(Boolean) Whether or not the associated delete_after_days value can be overridden by org scopes. Note: if the associated delete_after_days value is 0, overridable is ignored'
            description: (String) The policy description.
            id: (String) The ID of the policy.
            name: (String) The policy name. Defaults to the resource name.
            retain_for_days: '(Number) The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain_for_days and delete_after_days cannot both be 0.'
            retain_for_overridable: '(Boolean) Whether or not the associated retain_for_days value can be overridden by org scopes. Note: if the associated retain_for_days value is 0, overridable is ignored.'
            scope_id: (String) The scope for this policy.
        importStatements: []
    boundary_role:
        subCategory: ""
        description: The role resource allows you to configure a Boundary role.
        name: boundary_role
        title: boundary_role Resource - terraform-provider-boundary
        examples:
            - name: example
              manifest: |-
                {
                  "description": "My first role!",
                  "name": "My role",
                  "scope_id": "${boundary_scope.org.id}"
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
            - name: example
              manifest: |-
                {
                  "description": "My first role!",
                  "name": "My role",
                  "principal_ids": [
                    "${boundary_user.foo.id}",
                    "${boundary_user.bar.id}"
                  ],
                  "scope_id": "${boundary_scope.org.id}"
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_user.bar: |-
                    {
                      "name": "User 2",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_user.foo: |-
                    {
                      "name": "User 1",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: readonly
              manifest: |-
                {
                  "description": "A readonly role",
                  "grant_strings": [
                    "ids=*;type=*;actions=read"
                  ],
                  "name": "readonly",
                  "principal_ids": [
                    "${boundary_user.readonly.id}"
                  ],
                  "scope_id": "${boundary_scope.org.id}"
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_user.readonly: |-
                    {
                      "description": "A readonly user",
                      "name": "readonly",
                      "scope_id": "${boundary_scope.org.id}"
                    }
            - name: readonly
              manifest: |-
                {
                  "description": "A readonly role",
                  "grant_strings": [
                    "ids=*;type=*;actions=read"
                  ],
                  "name": "readonly",
                  "principal_ids": [
                    "${boundary_user.readonly.id}"
                  ],
                  "scope_id": "${boundary_scope.project.id}"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_user.readonly: |-
                    {
                      "description": "A readonly user",
                      "name": "readonly",
                      "scope_id": "${boundary_scope.org.id}"
                    }
        argumentDocs:
            description: (String) The role description.
            grant_scope_id: (String, Deprecated) For Boundary 0.15+, use grant_scope_ids instead. The scope for which the grants in the role should apply.
            grant_scope_ids: (Set of String) A list of scopes for which the grants in this role should apply, which can include the special values "this", "children", or "descendants"
            grant_strings: (Set of String) A list of stringified grants for the role.
            id: (String) The ID of the role.
            name: (String) The role name. Defaults to the resource name.
            principal_ids: (Set of String) A list of principal (user or group) IDs to add as principals on the role.
            scope_id: (String) The scope ID in which the resource is created. Defaults to the provider's default_scope if unset.
        importStatements:
            - terraform import boundary_role.foo <my-id>
    boundary_scope:
        subCategory: ""
        description: The scope resource allows you to configure a Boundary scope.
        name: boundary_scope
        title: boundary_scope Resource - terraform-provider-boundary
        examples:
            - name: global
              manifest: |-
                {
                  "global_scope": true,
                  "scope_id": "global"
                }
            - name: org
              manifest: |-
                {
                  "auto_create_admin_role": true,
                  "auto_create_default_role": true,
                  "description": "My first scope!",
                  "name": "organization_one",
                  "scope_id": "${boundary_scope.global.id}"
                }
              references:
                scope_id: boundary_scope.global.id
            - name: project
              manifest: |-
                {
                  "auto_create_admin_role": true,
                  "description": "My first scope!",
                  "name": "project_one",
                  "scope_id": "${boundary_scope.org.id}"
                }
              references:
                scope_id: boundary_scope.org.id
            - name: org
              manifest: |-
                {
                  "description": "My first scope!",
                  "name": "organization_one",
                  "scope_id": "${boundary_scope.global.id}"
                }
              references:
                scope_id: boundary_scope.global.id
              dependencies:
                boundary_role.org_admin: |-
                    {
                      "grant_scope_ids": [
                        "${boundary_scope.org.id}"
                      ],
                      "grant_strings": [
                        "ids=*;type=*;actions=*"
                      ],
                      "principal_ids": [
                        "u_auth"
                      ],
                      "scope_id": "${boundary_scope.global.id}"
                    }
        argumentDocs:
            auto_create_admin_role: (Boolean) If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler HCL but results in role resources that are unmanaged by Terraform.
            auto_create_default_role: (Boolean) Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources that are unmanaged by Terraform.
            description: (String) The scope description.
            global_scope: (Boolean) Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
            id: (String) The ID of the scope.
            name: (String) The scope name. Defaults to the resource name.
            scope_id: (String) The scope ID containing the sub scope resource.
        importStatements:
            - terraform import boundary_scope.foo <my-id>
    boundary_scope_policy_attachment Resource - terraform-provider-boundary:
        subCategory: ""
        name: boundary_scope_policy_attachment Resource - terraform-provider-boundary
        title: boundary_scope_policy_attachment Resource - terraform-provider-boundary
        argumentDocs:
            id: (String) The ID of this resource.
            policy_id: (String)
            scope_id: (String)
        importStatements: []
    boundary_storage_bucket:
        subCategory: ""
        description: The storage bucket resource allows you to configure a Boundary storage bucket. A storage bucket can only belong to the Global scope or an Org scope. At this time, the only supported storage for storage buckets is AWS S3. This feature requires Boundary Enterprise or Boundary HCP.
        name: boundary_storage_bucket
        title: boundary_storage_bucket Resource - terraform-provider-boundary
        examples:
            - name: aws_static_credentials_example
              manifest: |-
                {
                  "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                  "bucket_name": "mybucket",
                  "description": "My first storage bucket!",
                  "name": "My aws storage bucket with static credentials",
                  "plugin_name": "aws",
                  "scope_id": "${boundary_scope.org.id}",
                  "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}",
                  "worker_filter": "\"pki\" in \"/tags/type\""
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
            - name: aws_dynamic_credentials_example
              manifest: |-
                {
                  "attributes_json": "${jsonencode({\n    \"region\"                      = \"us-east-1\"\n    \"role_arn\"                    = \"arn:aws:iam::123456789012:role/S3Access\"\n    \"disable_credential_rotation\" = \"true\"\n  })}",
                  "bucket_name": "mybucket",
                  "description": "My first storage bucket!",
                  "name": "My aws storage bucket with dynamic credentials",
                  "plugin_name": "aws",
                  "scope_id": "${boundary_scope.org.id}",
                  "worker_filter": "\"pki\" in \"/tags/type\""
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
        argumentDocs:
            attributes_json: (String) The attributes for the storage bucket. The "region" attribute field is required when creating an AWS storage bucket. Values are either encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the storage bucket.
            bucket_name: (String) The name of the bucket within the external object store service.
            bucket_prefix: (String) The prefix used to organize the data held within the external object store.
            description: (String) The storage bucket description.
            id: (String) The ID of the storage bucket.
            internal_force_update: (String) Internal only. Used to force update so that we can always check the value of secrets.
            internal_hmac_used_for_secrets_config_hmac: (String) Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift detection.
            internal_secrets_config_hmac: (String) Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.
            name: (String) The storage bucket name. Defaults to the resource name.
            plugin_id: (String) The ID of the plugin that should back the resource. This or plugin_name must be defined.
            plugin_name: (String) The name of the plugin that should back the resource. This or plugin_id must be defined.
            scope_id: (String) The scope for this storage bucket.
            secrets_hmac: (String) The HMAC'd secrets value returned from the server.
            secrets_json: '(String, Sensitive) The secrets for the storage bucket. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" to clear any existing values. NOTE: Unlike "attributes_json", removing this block will NOT clear secrets from the storage bucket; this allows injecting secrets for one call, then removing them for storage.'
            worker_filter: (String) Filters to the worker(s) that can handle requests for this storage bucket. The filter must match an existing worker in order to create a storage bucket.
        importStatements:
            - terraform import boundary_storage_bucket.foo <my-id>
    boundary_target:
        subCategory: ""
        description: The target resource allows you to configure a Boundary target.
        name: boundary_target
        title: boundary_target Resource - terraform-provider-boundary
        examples:
            - name: foo
              manifest: |-
                {
                  "brokered_credential_source_ids": [
                    "${boundary_credential_library_vault.foo.id}"
                  ],
                  "default_port": "22",
                  "description": "Foo target",
                  "host_source_ids": [
                    "${boundary_host_set.foo.id}"
                  ],
                  "name": "foo",
                  "scope_id": "${boundary_scope.project.id}",
                  "type": "tcp"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_credential_library_vault.foo: |-
                    {
                      "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                      "credential_type": "username_password",
                      "description": "My first Vault credential library!",
                      "http_method": "GET",
                      "name": "foo",
                      "path": "my/secret/foo"
                    }
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "vault_store",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_host.bar: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "bar",
                      "type": "static"
                    }
                boundary_host.foo: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "foo",
                      "type": "static"
                    }
                boundary_host_catalog.foo: |-
                    {
                      "description": "test catalog",
                      "name": "test",
                      "scope_id": "${boundary_scope.project.id}",
                      "type": "static"
                    }
                boundary_host_set.foo: |-
                    {
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "host_ids": [
                        "${boundary_host.foo.id}",
                        "${boundary_host.bar.id}"
                      ],
                      "name": "foo",
                      "type": "static"
                    }
                boundary_scope.global: |-
                    {
                      "global_scope": true,
                      "scope_id": "global"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_storage_bucket.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "bucket_name": "mybucket",
                      "description": "My first storage bucket!",
                      "name": "My aws storage bucket",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.org.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}",
                      "worker_filter": "\"pki\" in \"/tags/type\""
                    }
            - name: ssh_foo
              manifest: |-
                {
                  "default_port": "22",
                  "description": "Ssh target",
                  "host_source_ids": [
                    "${boundary_host_set.foo.id}"
                  ],
                  "injected_application_credential_source_ids": [
                    "${boundary_credential_library_vault.foo.id}"
                  ],
                  "name": "ssh_foo",
                  "scope_id": "${boundary_scope.project.id}",
                  "type": "ssh"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_credential_library_vault.foo: |-
                    {
                      "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                      "credential_type": "username_password",
                      "description": "My first Vault credential library!",
                      "http_method": "GET",
                      "name": "foo",
                      "path": "my/secret/foo"
                    }
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "vault_store",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_host.bar: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "bar",
                      "type": "static"
                    }
                boundary_host.foo: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "foo",
                      "type": "static"
                    }
                boundary_host_catalog.foo: |-
                    {
                      "description": "test catalog",
                      "name": "test",
                      "scope_id": "${boundary_scope.project.id}",
                      "type": "static"
                    }
                boundary_host_set.foo: |-
                    {
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "host_ids": [
                        "${boundary_host.foo.id}",
                        "${boundary_host.bar.id}"
                      ],
                      "name": "foo",
                      "type": "static"
                    }
                boundary_scope.global: |-
                    {
                      "global_scope": true,
                      "scope_id": "global"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_storage_bucket.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "bucket_name": "mybucket",
                      "description": "My first storage bucket!",
                      "name": "My aws storage bucket",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.org.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}",
                      "worker_filter": "\"pki\" in \"/tags/type\""
                    }
            - name: ssh_session_recording_foo
              manifest: |-
                {
                  "default_port": "22",
                  "description": "Ssh target",
                  "enable_session_recording": true,
                  "host_source_ids": [
                    "${boundary_host_set.foo.id}"
                  ],
                  "injected_application_credential_source_ids": [
                    "${boundary_credential_library_vault.foo.id}"
                  ],
                  "name": "ssh_foo",
                  "scope_id": "${boundary_scope.project.id}",
                  "storage_bucket_id": "${boundary_storage_bucket.aws_example}",
                  "type": "ssh"
                }
              references:
                scope_id: boundary_scope.project.id
                storage_bucket_id: boundary_storage_bucket.aws_example
              dependencies:
                boundary_credential_library_vault.foo: |-
                    {
                      "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                      "credential_type": "username_password",
                      "description": "My first Vault credential library!",
                      "http_method": "GET",
                      "name": "foo",
                      "path": "my/secret/foo"
                    }
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "vault_store",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_host.bar: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "bar",
                      "type": "static"
                    }
                boundary_host.foo: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "foo",
                      "type": "static"
                    }
                boundary_host_catalog.foo: |-
                    {
                      "description": "test catalog",
                      "name": "test",
                      "scope_id": "${boundary_scope.project.id}",
                      "type": "static"
                    }
                boundary_host_set.foo: |-
                    {
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "host_ids": [
                        "${boundary_host.foo.id}",
                        "${boundary_host.bar.id}"
                      ],
                      "name": "foo",
                      "type": "static"
                    }
                boundary_scope.global: |-
                    {
                      "global_scope": true,
                      "scope_id": "global"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_storage_bucket.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "bucket_name": "mybucket",
                      "description": "My first storage bucket!",
                      "name": "My aws storage bucket",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.org.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}",
                      "worker_filter": "\"pki\" in \"/tags/type\""
                    }
            - name: address_foo
              manifest: |-
                {
                  "address": "127.0.0.1",
                  "default_port": "22",
                  "description": "Foo target with an address",
                  "name": "address_foo",
                  "scope_id": "${boundary_scope.project.id}",
                  "type": "tcp"
                }
              references:
                scope_id: boundary_scope.project.id
              dependencies:
                boundary_credential_library_vault.foo: |-
                    {
                      "credential_store_id": "${boundary_credential_store_vault.foo.id}",
                      "credential_type": "username_password",
                      "description": "My first Vault credential library!",
                      "http_method": "GET",
                      "name": "foo",
                      "path": "my/secret/foo"
                    }
                boundary_credential_store_vault.foo: |-
                    {
                      "address": "http://127.0.0.1:8200",
                      "description": "My first Vault credential store!",
                      "name": "vault_store",
                      "scope_id": "${boundary_scope.project.id}",
                      "token": "s.0ufRo6XEGU2jOqnIr7OlFYP5"
                    }
                boundary_host.bar: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "bar",
                      "type": "static"
                    }
                boundary_host.foo: |-
                    {
                      "address": "10.0.0.1",
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "name": "foo",
                      "type": "static"
                    }
                boundary_host_catalog.foo: |-
                    {
                      "description": "test catalog",
                      "name": "test",
                      "scope_id": "${boundary_scope.project.id}",
                      "type": "static"
                    }
                boundary_host_set.foo: |-
                    {
                      "host_catalog_id": "${boundary_host_catalog.foo.id}",
                      "host_ids": [
                        "${boundary_host.foo.id}",
                        "${boundary_host.bar.id}"
                      ],
                      "name": "foo",
                      "type": "static"
                    }
                boundary_scope.global: |-
                    {
                      "global_scope": true,
                      "scope_id": "global"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "${boundary_scope.global.id}"
                    }
                boundary_scope.project: |-
                    {
                      "auto_create_admin_role": true,
                      "description": "My first scope!",
                      "name": "project_one",
                      "scope_id": "${boundary_scope.org.id}"
                    }
                boundary_storage_bucket.aws_example: |-
                    {
                      "attributes_json": "${jsonencode({ \"region\" = \"us-east-1\" })}",
                      "bucket_name": "mybucket",
                      "description": "My first storage bucket!",
                      "name": "My aws storage bucket",
                      "plugin_name": "aws",
                      "scope_id": "${boundary_scope.org.id}",
                      "secrets_json": "${jsonencode({\n    \"access_key_id\"     = \"aws_access_key_id_value\",\n    \"secret_access_key\" = \"aws_secret_access_key_value\"\n  })}",
                      "worker_filter": "\"pki\" in \"/tags/type\""
                    }
        argumentDocs:
            address: (String) Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.
            brokered_credential_source_ids: (Set of String) A list of brokered credential source ID's.
            default_client_port: (Number) The default client port for this target.
            default_port: (Number) The default port for this target.
            description: (String) The target description.
            egress_worker_filter: (String) Boolean expression to filter the workers used to access this target
            enable_session_recording: (Boolean) HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.
            host_source_ids: (Set of String) A list of host source ID's. Cannot be used alongside address.
            id: (String) The ID of the target.
            ingress_worker_filter: (String) HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target
            injected_application_credential_source_ids: (Set of String) A list of injected application credential source ID's.
            name: (String) The target name. Defaults to the resource name.
            scope_id: (String) The scope ID in which the resource is created. Defaults to the provider's default_scope if unset.
            session_connection_limit: (Number)
            session_max_seconds: (Number)
            storage_bucket_id: (String) HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.
            type: (String) The target resource type.
            worker_filter: (String, Deprecated) Boolean expression to filter the workers for this target
        importStatements:
            - terraform import boundary_target.foo <my-id>
    boundary_user:
        subCategory: ""
        description: The user resource allows you to configure a Boundary user.
        name: boundary_user
        title: boundary_user Resource - terraform-provider-boundary
        examples:
            - name: jeff
              manifest: |-
                {
                  "account_ids": [
                    "${boundary_account_password.jeff.id}"
                  ],
                  "description": "Jeff's user resource",
                  "name": "jeff",
                  "scope_id": "${boundary_scope.org.id}"
                }
              references:
                scope_id: boundary_scope.org.id
              dependencies:
                boundary_account_password.jeff: |-
                    {
                      "auth_method_id": "${boundary_auth_method.password.id}",
                      "login_name": "jeff",
                      "password": "$uper$ecure",
                      "type": "password"
                    }
                boundary_auth_method.password: |-
                    {
                      "scope_id": "${boundary_scope.org.id}",
                      "type": "password"
                    }
                boundary_scope.org: |-
                    {
                      "auto_create_admin_role": true,
                      "auto_create_default_role": true,
                      "description": "My first scope!",
                      "name": "organization_one",
                      "scope_id": "global"
                    }
        argumentDocs:
            account_ids: (Set of String) Account ID's to associate with this user resource.
            description: (String) The user description.
            id: (String) The ID of the user.
            name: (String) The username. Defaults to the resource name.
            scope_id: (String) The scope ID in which the resource is created. Defaults to the provider's default_scope if unset.
        importStatements:
            - terraform import boundary_user.foo <my-id>
    boundary_worker:
        subCategory: ""
        description: The resource allows you to create a self-managed worker object.
        name: boundary_worker
        title: boundary_worker Resource - terraform-provider-boundary
        examples:
            - name: controller_led
              manifest: |-
                {
                  "description": "self managed worker with controller led auth",
                  "name": "worker 1",
                  "scope_id": "global"
                }
            - name: worker_led
              manifest: |-
                {
                  "description": "self managed worker with worker led auth",
                  "name": "worker 2",
                  "scope_id": "global",
                  "worker_generated_auth_token": "${var.worker_generated_auth_token}"
                }
              references:
                worker_generated_auth_token: var.worker_generated_auth_token
        argumentDocs:
            address: (String) The accessible address of the self managed worker.
            authorized_actions: (List of String) A list of actions that the worker is entitled to perform.
            controller_generated_activation_token: (String) A single use token generated by the controller to be passed to the self-managed worker.
            description: (String) The description for the worker.
            id: (String) The ID of the worker.
            name: (String) The name for the worker.
            release_version: (Number) The version of the Boundary binary running on the self managed worker.
            scope_id: (String) The scope for the worker. Defaults to global.
            worker_generated_auth_token: (String) The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        importStatements:
            - terraform import boundary_worker.foo <my-id>
